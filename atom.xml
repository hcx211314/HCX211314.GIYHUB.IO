<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魏龙龙的个人博客</title>
  
  <subtitle>魏龙龙的个人网站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://weilonglong.top/"/>
  <updated>2021-06-07T15:51:51.971Z</updated>
  <id>http://weilonglong.top/</id>
  
  <author>
    <name>魏龙龙</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript的基本使用</title>
    <link href="http://weilonglong.top/2021/06/07/TypeScript%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://weilonglong.top/2021/06/07/TypeScript%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2021-06-07T14:29:09.000Z</published>
    <updated>2021-06-07T15:51:51.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript的基本使用"><a href="#TypeScript的基本使用" class="headerlink" title="TypeScript的基本使用"></a>TypeScript的基本使用</h1><h2 id="原始数据类型与any"><a href="#原始数据类型与any" class="headerlink" title="原始数据类型与any"></a>原始数据类型与any</h2>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let isDone: boolean &#x3D; false</span><br><span class="line"></span><br><span class="line">let age: number &#x3D; 10</span><br><span class="line"></span><br><span class="line">let firstName: string &#x3D; &#39;viking&#39;</span><br><span class="line">let message: string &#x3D; &#96;Hello, $&#123;firstName&#125;&#96;</span><br><span class="line"></span><br><span class="line">let u: undefined &#x3D; undefined</span><br><span class="line">let n:null &#x3D; null</span><br><span class="line"></span><br><span class="line">let num: number &#x3D; undefined</span><br><span class="line"></span><br><span class="line">let notSure: any &#x3D; 4</span><br><span class="line">notSure &#x3D; &#39;maybe a string&#39;</span><br><span class="line">notSure &#x3D; true</span><br><span class="line"></span><br><span class="line">notSure.myName</span><br><span class="line">notSure.getName()</span><br></pre></td></tr></table></figure><h2 id="数组和元组"><a href="#数组和元组" class="headerlink" title="数组和元组"></a>数组和元组</h2>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let arrOfNumbers: number[] &#x3D; [1,2,3]</span><br><span class="line">arrOfNumbers.push(3)</span><br><span class="line"></span><br><span class="line">function test() &#123;</span><br><span class="line">  console.log(arguments)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let user: [string, number] &#x3D; [&#39;viking&#39;, 20]</span><br></pre></td></tr></table></figure><h2 id="InterFace"><a href="#InterFace" class="headerlink" title="InterFace"></a>InterFace</h2>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">  readonly id: number;</span><br><span class="line">  name: string;</span><br><span class="line">  age?: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let viking: Person &#x3D; &#123;</span><br><span class="line">  id: 1,</span><br><span class="line">  name: &#39;viking&#39;,</span><br><span class="line">  age: 20,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const add &#x3D; (x: number, y: number, z?: number): number &#x3D;&gt; &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const add &#x3D; (x: number, y: number, z?: number): number &#x3D;&gt; &#123;</span><br><span class="line">  if (typeof z &#x3D;&#x3D;&#x3D; &#39;number&#39;) &#123;</span><br><span class="line">    return x + y + z</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return x + y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">interface ISum &#123;</span><br><span class="line">  (x: number, y: number, z?: number): number</span><br><span class="line">&#125;</span><br><span class="line">let add2: ISum &#x3D; add</span><br></pre></td></tr></table></figure><h2 id="类型推论、联合类型和类型断言"><a href="#类型推论、联合类型和类型断言" class="headerlink" title="类型推论、联合类型和类型断言"></a>类型推论、联合类型和类型断言</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; type inference</span><br><span class="line">let str &#x3D; &#39;str&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; union types</span><br><span class="line">let numberOrString: number | string</span><br><span class="line"></span><br><span class="line">function getLength(input: string | number): number &#123;</span><br><span class="line">  const str &#x3D; input as string</span><br><span class="line">  if (str.length) &#123;</span><br><span class="line">    return str.length</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    const number &#x3D; input as number</span><br><span class="line">    return number.toString().length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;type guard</span><br><span class="line">function getLength2(input: string | number): number &#123;</span><br><span class="line">  if (typeof input &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123;</span><br><span class="line">    return input.length</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return input.toString().length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">interface Radio &#123;</span><br><span class="line">  switchRadio(trigger: boolean): void;</span><br><span class="line">&#125;</span><br><span class="line">interface Battery &#123;</span><br><span class="line">  checkBatteryStatus(): void;</span><br><span class="line">&#125;</span><br><span class="line">interface RadioWithBattery extends Radio &#123;</span><br><span class="line">  checkBatteryStatus(): void</span><br><span class="line">&#125;</span><br><span class="line">class Car implements Radio&#123;</span><br><span class="line">  switchRadio(trigger: boolean) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Cellphone implements RadioWithBattery &#123;</span><br><span class="line">  switchRadio(trigger: boolean) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  checkBatteryStatus() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const enum Direction &#123;</span><br><span class="line">  Up,</span><br><span class="line">  Down,</span><br><span class="line">  Left,</span><br><span class="line">  Right,</span><br><span class="line">&#125;</span><br><span class="line">console.log(Direction[0],Direction.Up)</span><br><span class="line">const enum Direction &#123;</span><br><span class="line">  Up &#x3D; &#39;UP&#39;,</span><br><span class="line">  Down &#x3D; &#39;DOWN&#39;,</span><br><span class="line">  Left &#x3D; &#39;LEFT&#39;,</span><br><span class="line">  Right &#x3D; &#39;RIGHT&#39;,</span><br><span class="line">&#125;</span><br><span class="line">const value &#x3D; &#39;UP&#39;</span><br><span class="line">if (value &#x3D;&#x3D;&#x3D; Direction.Up) &#123;</span><br><span class="line">  console.log(&#39;go up!&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">function echo&lt;T&gt;(arg: T): T &#123;</span><br><span class="line">  return arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const result &#x3D; echo(true)</span><br><span class="line"></span><br><span class="line">function swap&lt;T, U&gt;(tuple: [T, U]): [U, T] &#123;</span><br><span class="line">  return [tuple[1], tuple[0]]</span><br><span class="line">&#125;</span><br><span class="line">const result2 &#x3D; swap([&#39;string&#39;, 123])</span><br><span class="line"></span><br><span class="line">function echoWithArr&lt;T&gt;(arg: T[]): T[] &#123;</span><br><span class="line">  console.log(arg.length)</span><br><span class="line">  return arg</span><br><span class="line">&#125;</span><br><span class="line">const arrs &#x3D; echoWithArr([1, 2, 3])</span><br><span class="line"></span><br><span class="line">interface IWithLength &#123;</span><br><span class="line">  length: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function echoWithLength&lt;T extends IWithLength&gt;(arg: T): T &#123;</span><br><span class="line">  console.log(arg.length)</span><br><span class="line">  return arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const str &#x3D; echoWithLength(&#39;str&#39;)</span><br><span class="line">const obj &#x3D; echoWithLength(&#123; length: 10, width: 10&#125;)</span><br><span class="line">const arr2 &#x3D; echoWithLength([1, 2, 3])</span><br><span class="line"></span><br><span class="line">class Queue&lt;T&gt; &#123;</span><br><span class="line">  private data &#x3D; [];</span><br><span class="line">  push(item: T) &#123;</span><br><span class="line">    return this.data.push(item)</span><br><span class="line">  &#125;</span><br><span class="line">  pop(): T &#123;</span><br><span class="line">    return this.data.shift()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const queue &#x3D; new Queue&lt;number&gt;()</span><br><span class="line">queue.push(1)</span><br><span class="line">console.log(queue.pop().toFixed())</span><br><span class="line"></span><br><span class="line">interface KeyPair&lt;T, U&gt; &#123;</span><br><span class="line">  key: T</span><br><span class="line">  value: U </span><br><span class="line">&#125;</span><br><span class="line">let kp1: KeyPair&lt;number, string&gt; &#x3D; &#123; key: 1, value: &quot;string&quot;&#125;</span><br><span class="line">let kp2: KeyPair&lt;string, number&gt; &#x3D; &#123; key: &#39;str&#39;, value: 2 &#125;</span><br><span class="line">let arr: number[] &#x3D; [1,2,3]</span><br><span class="line">let arrTwo: Array&lt;number&gt; &#x3D; [1,2,3]</span><br></pre></td></tr></table></figure><h2 id="类型别名、字面量和交叉类型"><a href="#类型别名、字面量和交叉类型" class="headerlink" title="类型别名、字面量和交叉类型"></a>类型别名、字面量和交叉类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; type aliase</span><br><span class="line">let sum: (x: number, y: number) &#x3D;&gt; number</span><br><span class="line">const result &#x3D; sum(1,2)</span><br><span class="line">type PlusType &#x3D; (x: number, y: number) &#x3D;&gt; number</span><br><span class="line">let sum2: PlusType</span><br><span class="line">const result2 &#x3D; sum2(2, 3)</span><br><span class="line">type StrOrNumber &#x3D; string | number</span><br><span class="line">let result3: StrOrNumber &#x3D; &#39;123&#39;</span><br><span class="line">result3 &#x3D; 123</span><br><span class="line"></span><br><span class="line">const str: &#39;name&#39; &#x3D; &#39;name&#39;</span><br><span class="line">const number: 1 &#x3D; 1</span><br><span class="line">type Directions &#x3D; &#39;Up&#39; | &#39;Down&#39; | &#39;Left&#39; | &#39;Right&#39;</span><br><span class="line">let toWhere: Directions &#x3D; &#39;Left&#39;</span><br><span class="line"></span><br><span class="line">interface IName &#123;</span><br><span class="line">  name: string</span><br><span class="line">&#125;</span><br><span class="line">type IPerson &#x3D; IName &amp; &#123; age: number &#125;</span><br><span class="line">let person: IPerson &#x3D; &#123; name: &#39;123&#39;, age: 123 &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TypeScript的基本使用&quot;&gt;&lt;a href=&quot;#TypeScript的基本使用&quot; class=&quot;headerlink&quot; title=&quot;TypeScript的基本使用&quot;&gt;&lt;/a&gt;TypeScript的基本使用&lt;/h1&gt;&lt;h2 id=&quot;原始数据类型与any&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="TypeScript" scheme="http://weilonglong.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js源码</title>
    <link href="http://weilonglong.top/2021/04/19/Vue-js%E6%BA%90%E7%A0%81/"/>
    <id>http://weilonglong.top/2021/04/19/Vue-js%E6%BA%90%E7%A0%81/</id>
    <published>2021-04-19T12:16:28.000Z</published>
    <updated>2021-04-19T14:02:21.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="new-Vue背后的事情"><a href="#new-Vue背后的事情" class="headerlink" title="new Vue背后的事情"></a>new Vue背后的事情</h2><p>new Vue是实例Vue对象。Vue是一个<code>Function</code>。在<code>src/core/instance/index.js</code>中，源码定义Vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Vue (options) &#123;</span><br><span class="line">  if (process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39; &amp;&amp;</span><br><span class="line">    !(this instanceof Vue)</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(&#39;Vue is a constructor and should be called with the &#96;new&#96; keyword&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">  this._init(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Vue</code>只能通过new关键字定义，然后调用this._init方法，看<code>src/core/instance/init.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"> Vue.prototype._init &#x3D; function (options?: Object) &#123;</span><br><span class="line">  const vm: Component &#x3D; this</span><br><span class="line">  &#x2F;&#x2F; a uid</span><br><span class="line">  vm._uid &#x3D; uid++</span><br><span class="line"></span><br><span class="line">  let startTag, endTag</span><br><span class="line">  &#x2F;* istanbul ignore if *&#x2F;</span><br><span class="line">  if (process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">    startTag &#x3D; &#96;vue-perf-start:$&#123;vm._uid&#125;&#96;</span><br><span class="line">    endTag &#x3D; &#96;vue-perf-end:$&#123;vm._uid&#125;&#96;</span><br><span class="line">    mark(startTag)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; a flag to avoid this being observed</span><br><span class="line">  vm._isVue &#x3D; true</span><br><span class="line">  &#x2F;&#x2F; merge options 合并options</span><br><span class="line">  if (options &amp;&amp; options._isComponent) &#123;</span><br><span class="line">    &#x2F;&#x2F; optimize internal component instantiation</span><br><span class="line">    &#x2F;&#x2F; since dynamic options merging is pretty slow, and none of the</span><br><span class="line">    &#x2F;&#x2F; internal component options needs special treatment.</span><br><span class="line">    initInternalComponent(vm, options)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    vm.$options &#x3D; mergeOptions(</span><br><span class="line">      resolveConstructorOptions(vm.constructor),</span><br><span class="line">      options || &#123;&#125;,</span><br><span class="line">      vm</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;* istanbul ignore else *&#x2F;</span><br><span class="line">  if (process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39;) &#123;</span><br><span class="line">    initProxy(vm)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    vm._renderProxy &#x3D; vm</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; expose real self</span><br><span class="line">  vm._self &#x3D; vm</span><br><span class="line">  initLifecycle(vm)</span><br><span class="line">  initEvents(vm)</span><br><span class="line">  initRender(vm)</span><br><span class="line">  callHook(vm, &#39;beforeCreate&#39;)</span><br><span class="line">  initInjections(vm) &#x2F;&#x2F; resolve injections before data&#x2F;props</span><br><span class="line">  initState(vm)</span><br><span class="line">  initProvide(vm) &#x2F;&#x2F; resolve provide after data&#x2F;props</span><br><span class="line">  callHook(vm, &#39;created&#39;)</span><br><span class="line"></span><br><span class="line">  &#x2F;* istanbul ignore if *&#x2F;</span><br><span class="line">  if (process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">    vm._name &#x3D; formatComponentName(vm, false)</span><br><span class="line">    mark(endTag)</span><br><span class="line">    measure(&#96;vue $&#123;vm._name&#125; init&#96;, startTag, endTag)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (vm.$options.el) &#123;</span><br><span class="line">    vm.$mount(vm.$options.el)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue 初始化主要就干了几件事情，合并配置，初始化生命周期，初始化事件中心，初始化渲染，初始化 data、props、computed、watcher 等等。</p><h2 id="实例挂载的实现"><a href="#实例挂载的实现" class="headerlink" title="实例挂载的实现"></a>实例挂载的实现</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;new-Vue背后的事情&quot;&gt;&lt;a href=&quot;#new-Vue背后的事情&quot; class=&quot;headerlink&quot; title=&quot;new Vue背后的事情&quot;&gt;&lt;/a&gt;new Vue背后的事情&lt;/h2&gt;&lt;p&gt;new Vue是实例Vue对象。Vue是一个&lt;code&gt;Fu
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>垃圾回收</title>
    <link href="http://weilonglong.top/2021/03/18/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>http://weilonglong.top/2021/03/18/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</id>
    <published>2021-03-18T14:18:55.000Z</published>
    <updated>2021-03-18T16:09:27.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内存生命周期"><a href="#内存生命周期" class="headerlink" title="内存生命周期"></a>内存生命周期</h1><ul><li>申请空间</li><li>使用空间</li><li>释放空间</li></ul><h1 id="JavaScript中的垃圾回收"><a href="#JavaScript中的垃圾回收" class="headerlink" title="JavaScript中的垃圾回收"></a>JavaScript中的垃圾回收</h1><p>在Node中通过JavaScript使用内存32位系统约能使用0.7G，64位约能使用1.4G。</p><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p>  对象每次引用加一，被释放时减一，当这个值的引用次数变成 0 时，就可以将其内存空间回收<br>  缺点：循环引用(obj1 和 obj2 通过各自的属性相互引用，也就是说，这两个对象的引用次数都是 2)</p><h2 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h2><p>  在标记阶段，遍历所有的对象，标记所有活着的对象，而后清除阶段，只清除没有被标记的对象。</p><h2 id="标记整理"><a href="#标记整理" class="headerlink" title="标记整理"></a>标记整理</h2><p>  标记清除在完成一次后，内存空间出现不连续，如果要分配一个大的对象的情况下，可能因为无法分配导致提前触发垃圾回收。但是这次垃圾回收是没有必要的。<br>  标记整理是在标记清除算法上演变过来的。其区别是在整理过程中，将活着的对象往一端移动，将存活对象区域外直接清除，完成回收。</p><h2 id="分代整理"><a href="#分代整理" class="headerlink" title="分代整理"></a>分代整理</h2><p>新生代与老生代<br>老生代在64位系统中约为1400MB，在32位系统中约位700MB。<br>新生代在64位系统中约为32MB，在32位系统中约为16MB。<br>其最大计算公式为<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">intptr_t MaxReserved() &#123;</span><br><span class="line">  return 4 * reverved_semispace_size_ + max_old_generation_size_</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>Scavenge算法</li></ul><p>采用复制方式实现的垃圾回收，将内存空间一分为二，一个处于使用中称为From空间，一个处于闲置成为To空间。分配对象时，先在From空间进行分配。垃圾回收时，检查From空间，将存活的对象复制到To空间，非存活对象释放。完成之后，From空间和To空间身份对换。<br>此算法应用在新生代中，因为新生代生命周期较短，正好适合这个算法。<br>当一个对象多次复制仍然存在，会认为其生命周期长，会将其移动到老生代中，采用其他算法进行管理。从新生代移动到老生代的过程称为晋升。<br>晋升的两个条件</p><ul><li><p>是否经历过Scavenge算法。<br> 从From空间复制到To空间时，会检查内存地址是否经历过Scavenge回收，经历过，会将对象从From空间复制到老生代空间，否则复制到To空间。</p></li><li><p>To空间内存占比超过限制。<br> 从From空间复制到To空间时，如果To空间超过了25%，则这个对象会直接复制到老生代空间中，以保障后续变成From空间后，进行分配内存。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内存生命周期&quot;&gt;&lt;a href=&quot;#内存生命周期&quot; class=&quot;headerlink&quot; title=&quot;内存生命周期&quot;&gt;&lt;/a&gt;内存生命周期&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;申请空间&lt;/li&gt;
&lt;li&gt;使用空间&lt;/li&gt;
&lt;li&gt;释放空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="http://weilonglong.top/2021/03/01/%E6%8E%92%E5%BA%8F/"/>
    <id>http://weilonglong.top/2021/03/01/%E6%8E%92%E5%BA%8F/</id>
    <published>2021-03-01T12:40:56.000Z</published>
    <updated>2021-03-18T13:27:17.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><p>新建一个中介数组，利用数组的索引往上加，循环一遍原数组，从小到大循环中介数组，当每个value存在值，即当前索引在原数组中存在，value为几，即存在几遍，依次输出即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [5,2,2,1,3,3,4,5,6,7,6,7]</span><br><span class="line"></span><br><span class="line">function sort(array) &#123;</span><br><span class="line">  let arr &#x3D;  new Array()</span><br><span class="line">  array.forEach(item &#x3D;&gt; arr[item] &#x3D; arr[item] ? arr[item] +1 : 1)</span><br><span class="line">  let res &#x3D; []</span><br><span class="line">  arr.forEach((item,index) &#x3D;&gt;&#123;</span><br><span class="line">    if(item) &#123;</span><br><span class="line">      for(let i &#x3D; 0;i &lt; item; i++)&#123;</span><br><span class="line">        res.push(index)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  return res</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">console.log(sort(arr))</span><br></pre></td></tr></table></figure><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>从前到后，俩俩对比，1和2确定最小的，小的放到1位上，1和3对比，依次往后，确定出最小的，然后从2位开始，判断出第二小的，一直循环到只剩下一个元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [5,2,2,1,3,3,4,5,6,7,6,7]</span><br><span class="line">function sort(array) &#123;</span><br><span class="line">  for(let i&#x3D;0;i&lt;array.length;i++) &#123;</span><br><span class="line">    for(let j&#x3D;i+1;j&lt;array.length;j++) &#123;</span><br><span class="line">      if(array[i]&gt;array[j])&#123;</span><br><span class="line">        let temp &#x3D; array[i]</span><br><span class="line">        array[i] &#x3D; array[j]</span><br><span class="line">        arr[j] &#x3D; temp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return array</span><br><span class="line">&#125;</span><br><span class="line">console.log(sort(arr))</span><br></pre></td></tr></table></figure><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>定义一个基准值，然后小于基准的放置于左侧，大于基准的放置于右侧，然后进行递归左侧，递归右侧，不断递归，直至循环只剩下一个元素或者位空。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [5,2,2,1,3,3,4,5,6,7,6,7]</span><br><span class="line"></span><br><span class="line">function sort(array) &#123;</span><br><span class="line">  if(array.length &lt;&#x3D; 1) return array</span><br><span class="line">  const base  &#x3D; array[0]</span><br><span class="line">  const left &#x3D; []</span><br><span class="line">  const right &#x3D; []</span><br><span class="line">  const arr &#x3D; array.slice(1)</span><br><span class="line">  arr.forEach(item &#x3D;&gt; item &lt; base ? left.push(item) : right.push(item))</span><br><span class="line">  return sort(left).concat([base], sort(right))</span><br><span class="line">&#125;</span><br><span class="line">console.log(sort(arr))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;桶排序&quot;&gt;&lt;a href=&quot;#桶排序&quot; class=&quot;headerlink&quot; title=&quot;桶排序&quot;&gt;&lt;/a&gt;桶排序&lt;/h1&gt;&lt;p&gt;新建一个中介数组，利用数组的索引往上加，循环一遍原数组，从小到大循环中介数组，当每个value存在值，即当前索引在原数组中存在，va
      
    
    </summary>
    
    
    
      <category term="算法" scheme="http://weilonglong.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>实现strStr()</title>
    <link href="http://weilonglong.top/2021/02/22/%E5%AE%9E%E7%8E%B0strStr/"/>
    <id>http://weilonglong.top/2021/02/22/%E5%AE%9E%E7%8E%B0strStr/</id>
    <published>2021-02-22T15:14:08.000Z</published>
    <updated>2021-02-22T15:42:07.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现strStr"><a href="#实现strStr" class="headerlink" title="实现strStr"></a><a href="https://leetcode-cn.com/problems/implement-strstr/" target="_blank" rel="noopener">实现strStr</a></h1><h2 id="解题1"><a href="#解题1" class="headerlink" title="解题1"></a>解题1</h2><p>从前往后算，如果needle不存在或者两者相等，直接返回<br>如果前者长度不够，肯定-1<br>从前往后算，首字母相同时，进行记录，直到后者的长度为最后一位时仍相等，直接返回<br>不相等时，从第一个字母的下一位进行比对，同时第二个数字归0，<br>直到循环完，判断needle是否判断完，判断完，返回索引，如果最后一位没有判断，则为-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var strStr &#x3D; function(haystack, needle) &#123;</span><br><span class="line">  if(!needle || haystack &#x3D;&#x3D; needle) return 0</span><br><span class="line">  if(haystack.length &lt; needle.length) return -1</span><br><span class="line">  var res &#x3D; -1;</span><br><span class="line">  var i &#x3D; 0,j&#x3D;0;</span><br><span class="line">  while(i &lt; haystack.length) &#123;</span><br><span class="line">      if(haystack[i] &#x3D;&#x3D; needle[j])&#123;</span><br><span class="line">          if(j &#x3D;&#x3D; 0) &#123;</span><br><span class="line">              res &#x3D; i</span><br><span class="line">          &#125;</span><br><span class="line">          if(j &#x3D;&#x3D; needle.length-1)&#123;</span><br><span class="line">              return res</span><br><span class="line">          &#125;</span><br><span class="line">          i++;</span><br><span class="line">          j++;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          i &#x3D; i-j+1;</span><br><span class="line">          j &#x3D; 0;</span><br><span class="line">          res &#x3D; -1;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if(needle[j])&#123;res &#x3D; -1&#125;</span><br><span class="line">  return res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解题2-1的优化版-采用双指针"><a href="#解题2-1的优化版-采用双指针" class="headerlink" title="解题2(1的优化版)采用双指针"></a>解题2(1的优化版)采用双指针</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  var strStr &#x3D; function (haystack, needle) &#123;</span><br><span class="line">    let p &#x3D; 0, j &#x3D; 0</span><br><span class="line"></span><br><span class="line">    while (p &lt; haystack.length &amp;&amp; j &lt; needle.length) &#123;</span><br><span class="line">        if (haystack[p+j] &#x3D;&#x3D;&#x3D; needle[j]) &#123;</span><br><span class="line">            j++</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            j &#x3D; 0</span><br><span class="line">            p++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return j &#x3D;&#x3D;&#x3D; needle.length ? p : -1</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2><h2 id="利用subString-当第一个字母相同时，取相同长度的直接进行比较"><a href="#利用subString-当第一个字母相同时，取相同长度的直接进行比较" class="headerlink" title="利用subString,当第一个字母相同时，取相同长度的直接进行比较"></a>利用subString,当第一个字母相同时，取相同长度的直接进行比较</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var strStr &#x3D; function (haystack, needle) &#123;</span><br><span class="line">  if (needle &#x3D;&#x3D;&#x3D; &quot;&quot;) return 0</span><br><span class="line">  for (var i &#x3D; 0; i &lt; haystack.length; i++) &#123;</span><br><span class="line">      if (haystack[i] &#x3D;&#x3D;&#x3D; needle[0]) &#123;</span><br><span class="line">          if (haystack.substring(i, i + needle.length) &#x3D;&#x3D;&#x3D; needle) return i;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return -1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实现strStr&quot;&gt;&lt;a href=&quot;#实现strStr&quot; class=&quot;headerlink&quot; title=&quot;实现strStr&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/implement-strstr/&quot; t
      
    
    </summary>
    
    
    
      <category term="算法" scheme="http://weilonglong.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetCode" scheme="http://weilonglong.top/tags/leetCode/"/>
    
  </entry>
  
  <entry>
    <title>最长公共前缀</title>
    <link href="http://weilonglong.top/2021/02/22/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
    <id>http://weilonglong.top/2021/02/22/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</id>
    <published>2021-02-22T12:24:37.000Z</published>
    <updated>2021-02-22T15:42:31.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a><a href="https://leetcode-cn.com/problems/longest-common-prefix/" target="_blank" rel="noopener">最长公共前缀</a></h1><ul><li>简单描述描述<br>编写一个函数来查找字符串数组中的最长公共前缀。<br>如果不存在公共前缀，返回空字符串 “”。</li></ul><p>题解代码：</p><h2 id="从最短的单词往最短的长度依次进行比对"><a href="#从最短的单词往最短的长度依次进行比对" class="headerlink" title="从最短的单词往最短的长度依次进行比对"></a>从最短的单词往最短的长度依次进行比对</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  var longestCommonPrefix &#x3D; function(strs) &#123;</span><br><span class="line">    if(!strs.length) return &quot;&quot;;</span><br><span class="line">    var res &#x3D; &quot;&quot;;</span><br><span class="line">    strs.sort((a,b)&#x3D;&gt; a.length-b.length);</span><br><span class="line">    var res &#x3D; strs[0];</span><br><span class="line">    for(var i &#x3D;res.length;i--;i&gt;0) &#123;</span><br><span class="line">        var trueRes &#x3D; strs.every(str&#x3D;&gt; str.indexOf(res) &#x3D;&#x3D; 0);</span><br><span class="line">        if(trueRes) &#123;</span><br><span class="line">            return res</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            res &#x3D; res.slice(0,res.length - 1)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return &quot;&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="从第一个第一个字母，依次递增"><a href="#从第一个第一个字母，依次递增" class="headerlink" title="从第一个第一个字母，依次递增"></a>从第一个第一个字母，依次递增</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var longestCommonPrefix &#x3D; function(strs) &#123;</span><br><span class="line">  if(!strs.length) return &quot;&quot;</span><br><span class="line">  var res &#x3D; &quot;&quot;;   </span><br><span class="line">   var newWord&#x3D;&quot;&quot; </span><br><span class="line">  for(var i &#x3D; 0;i&lt;strs[0].length;i++)&#123;</span><br><span class="line">      newWord +&#x3D; strs[0][i];</span><br><span class="line">      var allJust &#x3D; strs.every(item&#x3D;&gt;item.indexOf(newWord) &#x3D;&#x3D; 0)</span><br><span class="line">      if(allJust)&#123;</span><br><span class="line">          res &#x3D; newWord</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">          return res</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="从第一个依次找到最后一个共同体，中间对比中如果找到了空，即不存在，直接返回就行"><a href="#从第一个依次找到最后一个共同体，中间对比中如果找到了空，即不存在，直接返回就行" class="headerlink" title="从第一个依次找到最后一个共同体，中间对比中如果找到了空，即不存在，直接返回就行"></a>从第一个依次找到最后一个共同体，中间对比中如果找到了空，即不存在，直接返回就行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var longestCommonPrefix &#x3D; function(strs) &#123;</span><br><span class="line">  if(!strs.length) return &quot;&quot;</span><br><span class="line">  var ans &#x3D; strs[0]</span><br><span class="line">  for(var i&#x3D;1;i&lt;strs.length;i++) &#123;</span><br><span class="line">      var j &#x3D; 0</span><br><span class="line">      for(;j&lt;ans.length&amp;&amp;j&lt;strs[i].length;j++) &#123;</span><br><span class="line">          if(ans[j] !&#x3D; strs[i][j])</span><br><span class="line">          break;</span><br><span class="line">      &#125;</span><br><span class="line">      ans &#x3D; ans.substr(0, j);</span><br><span class="line">      if(ans &#x3D;&#x3D;&#x3D; &quot;&quot;)</span><br><span class="line">          return ans;</span><br><span class="line">  &#125;</span><br><span class="line">  return ans</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最长公共前缀&quot;&gt;&lt;a href=&quot;#最长公共前缀&quot; class=&quot;headerlink&quot; title=&quot;最长公共前缀&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/longest-common-prefix/&quot; ta
      
    
    </summary>
    
    
    
      <category term="算法" scheme="http://weilonglong.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetCode" scheme="http://weilonglong.top/tags/leetCode/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记</title>
    <link href="http://weilonglong.top/2020/12/29/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://weilonglong.top/2020/12/29/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-29T13:50:52.000Z</published>
    <updated>2021-01-04T14:08:22.289Z</updated>
    
    <content type="html"><![CDATA[<h3 id="React学习笔记"><a href="#React学习笔记" class="headerlink" title="React学习笔记"></a>React学习笔记</h3><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;babel&quot;&gt;</span><br><span class="line">  const VDom &#x3D; &lt;h1&gt;123&lt;&#x2F;h1&gt;</span><br><span class="line">  ReactDOM.render(VDom,document.getElementById(&#39;test&#39;))</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="jsx注意事项"><a href="#jsx注意事项" class="headerlink" title="jsx注意事项"></a>jsx注意事项</h2><ul><li>定义虚拟DOM时，不要写引号；</li><li>标签中混入JS表达式时要用{}；</li><li>样式的类名指定不要用class，要用className；</li><li>只有一个根标签</li><li>标签必须闭合</li><li>标签首字母<ul><li>若小写字母开头，则将标签转为html中同名元素，若html中无该标签对应的同名元素，则报错</li><li>若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错</li></ul></li></ul><h2 id="类式组件"><a href="#类式组件" class="headerlink" title="类式组件"></a>类式组件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;h1&gt;123&lt;&#x2F;h1&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;MyComponent &#x2F;&gt;,document.getElementById(&#39;test))</span><br></pre></td></tr></table></figure><ul><li>执行ReactDOM.render….发生了什么<ul><li>React解析组件标签，找到MyCompoent组件</li><li>发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法</li><li>将render返回的虚拟DOM转化为真实DOM，随后呈现在页面中</li></ul></li></ul><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><h3 id="初始化state"><a href="#初始化state" class="headerlink" title="初始化state"></a>初始化state</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  constructor(props)&#123;</span><br><span class="line">    super(props)</span><br><span class="line">    &#x2F;&#x2F; 初始化状态</span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      isShow: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(this)</span><br><span class="line">    &#x2F;&#x2F; 读取状态</span><br><span class="line">    const &#123; isShow &#125; &#x3D; this.state</span><br><span class="line">    return &lt;h1&gt;123&#123;isShow ? 45 : 67 &#125;&lt;&#x2F;h1&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;MyComponent &#x2F;&gt;,document.getElementById(&#39;test))</span><br></pre></td></tr></table></figure><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  constructor(props)&#123;</span><br><span class="line">    super(props)</span><br><span class="line">    &#x2F;&#x2F; 初始化状态</span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      isShow: true</span><br><span class="line">    &#125;</span><br><span class="line">    this.changeShow  &#x3D; this.changeShow.bind(this) &#x2F;&#x2F; 解决this丢失问题</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(this) &#x2F;&#x2F; 组件实例对象</span><br><span class="line">    &#x2F;&#x2F; 读取状态</span><br><span class="line">    const &#123; isShow &#125; &#x3D; this.state</span><br><span class="line">    return &lt;h1 onClick&#x3D;&#123;this.changeSHow&#125;&gt;123&#123;isShow ? 45 : 67 &#125;&lt;&#x2F;h1&gt;</span><br><span class="line">  &#125;</span><br><span class="line">  changeShow()&#123;</span><br><span class="line">    &#x2F;&#x2F; changeShow 放在哪里？ —————— MyCompoent的原想对象上，供实例使用</span><br><span class="line">    &#x2F;&#x2F; 由于changeShow是作为onClick的回调，所以不是通过实例调用的，是直接调用</span><br><span class="line">    &#x2F;&#x2F; 类中的方法默认开启了局部的严格模式，所以changeShow中的this为undefined</span><br><span class="line">    console.log(this)</span><br><span class="line">    const &#123; isShow &#125; &#x3D; this.state</span><br><span class="line">    &#x2F;&#x2F; 状态必须通过setState进行更新</span><br><span class="line">    this.setState(isShow:!isShow) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;MyComponent &#x2F;&gt;,document.getElementById(&#39;test))</span><br></pre></td></tr></table></figure><h3 id="精简写法"><a href="#精简写法" class="headerlink" title="精简写法"></a>精简写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  state &#x3D; &#123; isShow: true&#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; isShow &#125; &#x3D; this.state</span><br><span class="line">    return &lt;h1 onClick&#x3D;&#123;this.changeSHow&#125;&gt;123&#123;isShow ? 45 : 67 &#125;&lt;&#x2F;h1&gt;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 自定义方法——————用赋值语句的形式+箭头函数</span><br><span class="line">  changeShow &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line">    const &#123; isShow &#125; &#x3D; this.state</span><br><span class="line">    this.setState(isShow:!isShow) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;MyComponent &#x2F;&gt;,document.getElementById(&#39;test))</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>state是组件对象最重要的属性，值是对象（可以包含多个key-value的组合）</li><li>组件被成为”状态机”,通过更新组件的state来更新对应的页面显示（重新渲染组件）</li><li>组件中render方法中的this为组件实例对象</li><li>组件定义的方法中this为undefined,如何解决？<ul><li>强制绑定this：通过函数对象的bind()</li><li>箭头函数</li></ul></li><li>状态数据，不能直接修改或更新（this.setState(isShow:!isShow)）</li></ul><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><h3 id="类式组件-1"><a href="#类式组件-1" class="headerlink" title="类式组件"></a>类式组件</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Person extends React.component&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123;name,age&#125; &#x3D; this.props</span><br><span class="line">    return (</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&#123;name&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&#123;age&#125;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;&#x2F;ul&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;Person name&#x3D;&quot;张三&quot; age&#x3D;&quot;12&quot;&#x2F;&gt;, document.getElementById(&#39;test&#39;))</span><br><span class="line">ReactDOM.render(&lt;Person name&#x3D;&quot;李四&quot; age&#x3D;&quot;15&quot;&#x2F;&gt;, document.getElementById(&#39;test1&#39;))</span><br><span class="line">class Person extends React.component&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123;name,age&#125; &#x3D; this.props</span><br><span class="line">    return (</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&#123;name&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&#123;age&#125;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;&#x2F;ul&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const p1 &#x3D; &#123;name:&quot;张三&quot;, age:12&#125;</span><br><span class="line">ReactDOM.render(&lt;Person &#123;...p1&#125; &#x2F;&gt;, document.getElementById(&#39;test&#39;))</span><br></pre></td></tr></table></figure><h4 id="props类型限制"><a href="#props类型限制" class="headerlink" title="props类型限制"></a>props类型限制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Person extends React.component&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123;name,age&#125; &#x3D; this.props</span><br><span class="line">    return (</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&#123;name&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&#123;age&#125;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;&#x2F;ul&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 对标签属性进行类型、必要性的限制</span><br><span class="line">Person.protoTypes &#x3D; &#123;</span><br><span class="line">  name: ProtoTypes.string.isRequired,</span><br><span class="line">  age: ProtoTypes.number,</span><br><span class="line">  speak: ProtoTypes.func &#x2F;&#x2F; 显示为函数时，类型为func</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 指定默认标签属性值</span><br><span class="line">Person.defaultProps &#x3D; &#123;</span><br><span class="line">  age: 12</span><br><span class="line">&#125;</span><br><span class="line">const p1 &#x3D; &#123;name:&quot;张三&quot;, age:12&#125;</span><br><span class="line">ReactDOM.render(&lt;Person &#123;...p1&#125; &#x2F;&gt;, document.getElementById(&#39;test&#39;))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Person extends React.component &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 对标签属性进行类型、必要性的限制</span><br><span class="line">  static protoTypes &#x3D; &#123;</span><br><span class="line">    name: ProtoTypes.string.isRequired,</span><br><span class="line">    age: ProtoTypes.number,</span><br><span class="line">    speak: ProtoTypes.func &#x2F;&#x2F; 显示为函数时，类型为func</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 指定默认标签属性值</span><br><span class="line">  static defaultProps &#x3D; &#123;</span><br><span class="line">    age: 12</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123;name,age&#125; &#x3D; this.props</span><br><span class="line">    return (</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&#123;name&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&#123;age&#125;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;&#x2F;ul&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const p1 &#x3D; &#123;name:&quot;张三&quot;, age:12&#125;</span><br><span class="line">ReactDOM.render(&lt;Person &#123;...p1&#125; &#x2F;&gt;, document.getElementById(&#39;test&#39;))</span><br></pre></td></tr></table></figure><h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function Person(props) &#123;</span><br><span class="line">  const &#123; name,age &#125; &#x3D; props</span><br><span class="line">  return (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;&#123;name&#125;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li&gt;&#123;age&#125;&lt;&#x2F;li&gt;</span><br><span class="line">     &lt;&#x2F;ul&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 对标签属性进行类型、必要性的限制</span><br><span class="line">Person.protoTypes &#x3D; &#123;</span><br><span class="line">  name: ProtoTypes.string.isRequired,</span><br><span class="line">  age: ProtoTypes.number,</span><br><span class="line">  speak: ProtoTypes.func &#x2F;&#x2F; 显示为函数时，类型为func</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 指定默认标签属性值</span><br><span class="line">Person.defaultProps &#x3D; &#123;</span><br><span class="line">  age: 12</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;Person &#123;...p1&#125; &#x2F;&gt;, document.getElementById(&#39;test&#39;))</span><br></pre></td></tr></table></figure><h2 id="refs和事件处理"><a href="#refs和事件处理" class="headerlink" title="refs和事件处理"></a>refs和事件处理</h2><h4 id="refs的设置"><a href="#refs的设置" class="headerlink" title="refs的设置"></a>refs的设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 字符串</span><br><span class="line">ref&#x3D;&quot;ref1&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 回调函数</span><br><span class="line">ref&#x3D;&#123; c &#x3D;&gt; this.ref1 &#x3D; c&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Test extends React.component &#123;</span><br><span class="line">  saveInput &#x3D; (c) &#x3D;&gt; &#123;</span><br><span class="line">    this.input1 &#x3D; c</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;h1 ref &#x3D; &#123; this.saveInput &#125; &gt;123&lt;&#x2F;h1&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; createRef</span><br><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">  &#x2F;*</span><br><span class="line">   * React.createRef 调用可以返回一个容器，该容器可以存储被ref所标识的节点,该容器是“专人专用”的</span><br><span class="line">  *&#x2F;</span><br><span class="line">  myRef &#x3D; React.createRef()</span><br><span class="line">  showData &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    const &#123; input1 &#125; &#x3D; this</span><br><span class="line">    alert(input1.value)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input ref&#x3D;&quot;&#123;this.myRef&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;this.showData&#125;&gt; 点击&lt;&#x2F;button&gt; </span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><ul><li>通过onXxxx属性指定事件处理函数(注意大小写)<ul><li>React使用的自定义（合成）事件，而不是使用原生DOM事件 ————————  为了更好的兼容性</li><li>React中的事件是通过事件委托方式处理的（委托给组件最外层的元素） ———————— 为了高效</li></ul></li><li>通过event.target得到发生事件的DOM元素对象</li></ul><h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h3><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Demo extends React.Componet &#123;</span><br><span class="line">  state &#x3D; &#123; opacity : 1  &#125;</span><br><span class="line"></span><br><span class="line">  death &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    ReactDOM.unmountComponentAtNode(document.getElementById(&#39;test))</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;组件挂载完毕</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    this.timer &#x3D; setInterval(()&#x3D;&gt;this.state.opacity-&#x3D;0.2,200)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 卸载前</span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    &#x2F;&#x2F; 清除定时器</span><br><span class="line">    clearInterval(this.timer)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;this.death&#125;&gt;123&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;React学习笔记&quot;&gt;&lt;a href=&quot;#React学习笔记&quot; class=&quot;headerlink&quot; title=&quot;React学习笔记&quot;&gt;&lt;/a&gt;React学习笔记&lt;/h3&gt;&lt;h2 id=&quot;基本&quot;&gt;&lt;a href=&quot;#基本&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式中的单例模式学习</title>
    <link href="http://weilonglong.top/2020/08/25/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    <id>http://weilonglong.top/2020/08/25/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-08-25T06:01:57.000Z</published>
    <updated>2021-02-22T15:43:45.154Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象的特点是封装、继承和多态。<br>JavaScript因为其特点设计模式与其他语言的实现都不太一致。<br>下面开始单例模式的学习。</p><h3 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h3><p>单例模式的定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><h4 id="ES5实现"><a href="#ES5实现" class="headerlink" title="ES5实现"></a>ES5实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var Wife &#x3D; function(name)&#123;</span><br><span class="line">  this.name &#x3D; name</span><br><span class="line">  this.instance &#x3D; null</span><br><span class="line">&#125;</span><br><span class="line">Wife.prototype.getName &#x3D; function()&#123;</span><br><span class="line">  alert(this.name)</span><br><span class="line">&#125;</span><br><span class="line">Wife.getInstance &#x3D; function(name) &#123;</span><br><span class="line">  if(!this.instance) &#123;</span><br><span class="line">    this.instance &#x3D; new Wife(name);</span><br><span class="line">  &#125;</span><br><span class="line">  return this.instance</span><br><span class="line">&#125;</span><br><span class="line">var a &#x3D; Wife.getInstance(&#39;xiaohong&#39;)</span><br><span class="line">var b &#x3D; Wife.getInstance(&#39;xiaozhang&#39;)</span><br><span class="line">console.log(a &#x3D;&#x3D;&#x3D; b) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h4 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Wife&#123;</span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    if(!Wife.instance) &#123;</span><br><span class="line">      this.name &#x3D; name</span><br><span class="line">      Wife.instance &#x3D; this</span><br><span class="line">    &#125;</span><br><span class="line">    return Wife.instance</span><br><span class="line">  &#125;</span><br><span class="line">  getName() &#123;</span><br><span class="line">    return &#96;妻子的姓名是$&#123;this.name&#125;&#96;</span><br><span class="line">  &#125;</span><br><span class="line">  static getInstance(name) &#123;</span><br><span class="line">    if(!this.instance) &#123;</span><br><span class="line">      this.instance &#x3D; new Wife(name);</span><br><span class="line">    &#125;</span><br><span class="line">    return this.instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var a &#x3D; Wife.getInstance(&#39;xiaohong&#39;)</span><br><span class="line">var b &#x3D; Wife.getInstance(&#39;xiaozhang&#39;)</span><br><span class="line">var c &#x3D; new Wife(&#39;zhangsan&#39;)</span><br><span class="line">console.log(a &#x3D;&#x3D;&#x3D; c) &#x2F;&#x2F; true</span><br><span class="line">console.log(a &#x3D;&#x3D;&#x3D; b) &#x2F;&#x2F; true</span><br><span class="line">c.getName() &#x2F;&#x2F; 妻子的姓名是xiaohong</span><br></pre></td></tr></table></figure><h3 id="用代理实现单例模式"><a href="#用代理实现单例模式" class="headerlink" title="用代理实现单例模式"></a>用代理实现单例模式</h3><p>建立简单的创建普通类，引入一个代理类去管理单例逻辑，这样类的创建也不会受影响，单例也不会受影响。这样可以在想去创建新的实例就去创建新的实例，想使用单例时，使用单例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var createDiv(html)&#123;</span><br><span class="line">  this.html &#x3D; html</span><br><span class="line">  this.init()</span><br><span class="line">&#125;</span><br><span class="line">createDiv.prototype.init &#x3D; function()&#123;</span><br><span class="line">  var div &#x3D; document.createElement(&#39;div&#39;)</span><br><span class="line">  div.innerHTML &#x3D; this.html</span><br><span class="line">  document.body.appendChild(div)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 引入代理类ProxySingletonCreateDiv</span><br><span class="line">var ProxySingleTonCreateDiv &#x3D; (function()&#123;</span><br><span class="line">  var instance;</span><br><span class="line">  return function(html)&#123;</span><br><span class="line">    if(!instance)&#123;</span><br><span class="line">      instance &#x3D; new createDiv(html)</span><br><span class="line">    &#125;</span><br><span class="line">    return instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">var a &#x3D; new ProxySingletonCreateDiv(&quot;sven1&quot;)</span><br><span class="line">var b &#x3D; new ProxySingletonCreateDiv(&quot;sven2&quot;)</span><br><span class="line">a&#x3D;&#x3D;&#x3D;b &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h3 id="单例在JavaScript中的其余方式实现"><a href="#单例在JavaScript中的其余方式实现" class="headerlink" title="单例在JavaScript中的其余方式实现"></a>单例在JavaScript中的其余方式实现</h3><h4 id="使用命名空间"><a href="#使用命名空间" class="headerlink" title="使用命名空间"></a>使用命名空间</h4><p>单例的核心是“单例”，即只有一个实例，并提供全局访问。在JavaScript中单例无处不在，例如var a = {}，这个a变量在全局作用域下即是独一无二的，而且可以在任何位置访问到变量a。<br>但是其也有部分缺点，会造成命名污染，其随时可能会被覆盖，尤其在多人共同维护一个项目时。<br>例如有两个变量a,b,将其减少全局变量的数量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var nameSpace1 &#x3D; &#123;</span><br><span class="line">  a:&#39;a&#39;,</span><br><span class="line">  b:&#39;b&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用动态创建命名空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var app &#x3D; &#123;&#125;</span><br><span class="line">app.nameSpace &#x3D; function(name)&#123;</span><br><span class="line">  var parts &#x3D; name.split(&#39;.&#39;)</span><br><span class="line">  var curret &#x3D; app;</span><br><span class="line">  for (var i in parts)&#123;</span><br><span class="line">    if(!curret[parts[i]])&#123;</span><br><span class="line">      current[parts[i]] &#x3D; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    current &#x3D; curret[parts[i]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">app.nameSpace(&#39;event&#39;)</span><br><span class="line">app.nameSpace(&#39;dom.style&#39;)</span><br></pre></td></tr></table></figure><p><code>解析：将传入的key值利用String.split()将其分割，确定为其为几级key，从第一级key开始判断，如果不存在该key，那么将其key键的value值设为空对象，否则不进行任何改变，将其赋值给current，进行判断2次属性</code><br>其相当于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var app &#x3D; &#123;</span><br><span class="line">  event:&#123;&#125;,</span><br><span class="line">  dom:style:&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行解析，当运行app.nameSpace(‘event’)时，current=app将app的地址赋值给current。其运行String.split(‘.’);得到[‘event’];for-in中，判断app.event是否存在，存在即不需要改变，不存在就赋值。进行复制current = current.event,即app.event，因为for循环终止，故无后续。<br>当运行app.nameSpace(‘dom.style’)时，前序与运行app.nameSpace(‘event’)一致，当运行完第一遍时，运行[‘dom’,’style’]的’style’元素时，理解其current===app.dom即可。</p><h4 id="使用闭包"><a href="#使用闭包" class="headerlink" title="使用闭包"></a>使用闭包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var user &#x3D;(function()&#123;</span><br><span class="line">  var _name &#x3D; &#39;张三&#39;</span><br><span class="line">  var _age &#x3D; 12</span><br><span class="line">  return &#123;</span><br><span class="line">    getUserInfo:function()&#123; </span><br><span class="line">      return _name + &#39;-&#39; + _age</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>与</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var user &#x3D;(function()&#123;</span><br><span class="line">  var _name &#x3D; &#39;张三&#39;</span><br><span class="line">  var _age &#x3D; 12</span><br><span class="line">  return function()&#123; </span><br><span class="line">    return _name + &#39;-&#39; + _age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>上面两种写法是一样的，都可以得到’张三-12’,因为_name和_age是封闭在闭包的函数中的，外面是访问不到这两个变量的，这就避免了全局的命令污染。<br>第一种写法获得其结果为 user.getUserInfo()<br>第二种写法获得其结果为 user()<br>这两种区别只是闭包的写发不一致，但是思想却是一致的，对于闭包，甚至你可以将闭包函数进行不利用IFEE进行运行，自己在使用的时候在去调用。这个就不多加赘述了。</p><h4 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h4><p>惰性单例的含义是在需要的时候才创建对象。<br>在登录的一些逻辑，例如登录有可能是第一开始便创建，然后隐藏，在点击按钮时进行显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;button id&#x3D;&quot;loginButton&quot;&gt;登录&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var loginLayer &#x3D; (function()&#123;</span><br><span class="line">    var div &#x3D;  documnet.createElement(&#39;div&#39;)</span><br><span class="line">    div.innerText &#x3D; &#39;我是登录浮窗&#39;</span><br><span class="line">    div.style.display &#x3D; &#39;none&#39;</span><br><span class="line">    document.body.appendChild(div)</span><br><span class="line">    return div</span><br><span class="line">  &#125;)()</span><br><span class="line">  document.getElementById(&#39;loginButton&#39;).onclick &#x3D; function()&#123;</span><br><span class="line">    loginLayer.style.display &#x3D; &#39;block&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>这时候可以实现效果，但是有一个问题，就是当我误点或者进行其余操作的时候，也会进行创建login的弹窗，只不过因为隐藏，导致我们没有看见而已，浪费了性能。我们进行改写,使其按钮被点击时再创建弹窗。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;button id&#x3D;&quot;loginButton&quot;&gt;登录&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var createLoginLayer &#x3D; function()&#123;</span><br><span class="line">    var div &#x3D;  documnet.createElement(&#39;div&#39;)</span><br><span class="line">    div.innerText &#x3D; &#39;我是登录浮窗&#39;</span><br><span class="line">    div.style.display &#x3D; &#39;none&#39;</span><br><span class="line">    document.body.appendChild(div)</span><br><span class="line">    return div</span><br><span class="line">  &#125;)</span><br><span class="line">  document.getElementById(&#39;loginButton&#39;).onclick &#x3D; function()&#123;</span><br><span class="line">    var loginLayer &#x3D; new createLoginLayer()</span><br><span class="line">    loginLayer.style.display &#x3D; &#39;block&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>这样就会在点击按钮时，才会去创建登录弹窗。但是这还是有一个问题，每次点击都会创建一个新的Dom节点。这个没有实现单例。<br>我们进行新增一个变量，判断是否已经创建国弹窗。如果创建过，即不创建了，返回之前创建的即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var createLoginLayer &#x3D; (function()&#123;</span><br><span class="line">  var div</span><br><span class="line">  return function()&#123;</span><br><span class="line">    if(!div)&#123;</span><br><span class="line">      div &#x3D;  documnet.createElement(&#39;div&#39;)</span><br><span class="line">      div.innerText &#x3D; &#39;我是登录浮窗&#39;</span><br><span class="line">      div.style.display &#x3D; &#39;none&#39;</span><br><span class="line">      document.body.appendChild(div)</span><br><span class="line">    &#125;</span><br><span class="line">    return div</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">document.getElementById(&#39;loginButton&#39;).onclick &#x3D; function()&#123;</span><br><span class="line">  var loginLayer &#x3D; new createLoginLayer()</span><br><span class="line">  loginLayer.style.display &#x3D; &#39;block&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通用的惰性单例"><a href="#通用的惰性单例" class="headerlink" title="通用的惰性单例"></a>通用的惰性单例</h4><ul><li>上面的代码仍然是单一职责原则的，创建对象和管理单例的逻辑都放在createLoginLayer对象内部。</li><li>如果下次使用其去创建ifram，或者其他播放器等，就需要重新抄写一遍。</li></ul><p>我们将不变的部分隔离出来，其的逻辑总的来说就是创建过对象，创建过，retutn，没创建过，进行创建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj</span><br><span class="line">if(!obj)&#123;</span><br><span class="line">  obj &#x3D; ~~~</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们将管理单例的逻辑从之前的代码中拿出来，这些逻辑封装在getSingle函数内部中，创建对象的方法当成参数被其传入到getSingle函数中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var getSingle &#x3D; function(fn)&#123;</span><br><span class="line">  var result </span><br><span class="line">  return function()&#123;</span><br><span class="line">    return result || (result &#x3D; fn.apply(this, arguments))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样创建登录浮窗的方法用参数fn的形式传入getSingle，我们不仅可以传入createLoginLayer,还可以传入createScript、createXhr等。之后经getSingle返回一个新的闭包函数，result为内部变量。这样之后用到result时，即可直接返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var createLoginLayer &#x3D; (function()&#123;</span><br><span class="line">  var div&#x3D; documnet.createElement(&#39;div&#39;)</span><br><span class="line">  div.innerText &#x3D; &#39;我是登录浮窗&#39;</span><br><span class="line">  div.style.display &#x3D; &#39;none&#39;</span><br><span class="line">  document.body.appendChild(div)</span><br><span class="line">  return div</span><br><span class="line">&#125;</span><br><span class="line">var createSingleLoginLayer &#x3D; getSingle(createLoginLayer)</span><br><span class="line">document.getElementById(&#39;loginButton&#39;).onclick &#x3D; function()&#123;</span><br><span class="line">    var loginLayer &#x3D; createSingleLoginLayer()</span><br><span class="line">    loginLayer.style.display &#x3D; &#39;block&#39;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>创建其余的同理。</p><p>在渲染完一个页面的列表之后，对这个列表绑定click事件。在使用事件代理的前提下，click事件只需要在第一次渲染列表的时候进行绑定一次即可。如果不去判断是不是第一次渲染，那么依赖于jQuery会绑定one事件。<br>如果使用getSingle函数，一样可以达到相同的效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var bindEvent &#x3D; getSingle(function()&#123;</span><br><span class="line">  document.getElementById(&#39;div1&#39;).onclick &#x3D; function()&#123;</span><br><span class="line">    alert(&#39;click&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">  return true</span><br><span class="line">&#125;)</span><br><span class="line">var render &#x3D; function()&#123;</span><br><span class="line">  console.log(&quot;开始渲染列表&quot;)</span><br><span class="line">  bindEvent()</span><br><span class="line">&#125;</span><br><span class="line">render()</span><br><span class="line">render()</span><br><span class="line">render()</span><br></pre></td></tr></table></figure><p>虽然render函数被调用了3次，但是其绑定事件只执行了一次</p>]]></content>
    
    <summary type="html">
    
      JavaScript中单例模式的学习与实现。
    
    </summary>
    
    
    
      <category term="设计模式" scheme="http://weilonglong.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>快速开启本地服务</title>
    <link href="http://weilonglong.top/2020/08/22/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%90%AF%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1/"/>
    <id>http://weilonglong.top/2020/08/22/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%90%AF%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1/</id>
    <published>2020-08-22T07:18:56.000Z</published>
    <updated>2021-02-22T15:43:45.163Z</updated>
    
    <content type="html"><![CDATA[<p>在本地开发时,写html页面时经常会遇到需要开启本地服务,在其余电脑进行调试，或者进行手机查看效果的情况。<br>在这介绍两种。</p><h3 id="利用express-generator快速开启本地服务"><a href="#利用express-generator快速开启本地服务" class="headerlink" title="利用express-generator快速开启本地服务"></a>利用express-generator快速开启本地服务</h3><p>全局安装express-generator<br><code>npm i express-generator -g</code><br>创建项目<br><code>express  demo -e</code><br>-e的含义是使用ejs模板<br><code>cd demo</code><br><code>npm install</code><br>将文件放到public文件夹下,执行<code>npm run dev</code>默认3000端口即可访问</p><h3 id="在Vscode中安装Live-Server插件"><a href="#在Vscode中安装Live-Server插件" class="headerlink" title="在Vscode中安装Live Server插件"></a>在Vscode中安装Live Server插件</h3><p>在Vscode中搜索Live Server进行安装，将工作文件夹拖到工作区，或文件打开文件夹。右键点击Open with live server即可访问5500端口。<br>如在上次已经打开过项目，再进行开启项目时，开启不起来，右键点击stop live serve,重新开启即可。</p>]]></content>
    
    <summary type="html">
    
      在本地电脑快速开启本地服务
    
    </summary>
    
    
    
      <category term="快速开启本地服务" scheme="http://weilonglong.top/tags/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%90%AF%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Socket.Io与express在http请求中发送消息初体验</title>
    <link href="http://weilonglong.top/2020/08/22/Socket-Io%E4%B8%8Eexpress%E5%9C%A8http%E8%AF%B7%E6%B1%82%E4%B8%AD%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://weilonglong.top/2020/08/22/Socket-Io%E4%B8%8Eexpress%E5%9C%A8http%E8%AF%B7%E6%B1%82%E4%B8%AD%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2020-08-22T06:15:01.000Z</published>
    <updated>2020-08-24T12:49:10.089Z</updated>
    
    <content type="html"><![CDATA[<p>网上基本出现的大多都是这种简单写法,并没有做一个深入的写，怎么进行在http请求中进行websocket的发送消息，近日，自己因为需求，因为不熟悉，走了很多弯路，故自己这次进行一下记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var express &#x3D; require(&#39;express&#39;); </span><br><span class="line">var app &#x3D; express();</span><br><span class="line"></span><br><span class="line">var server &#x3D; require(&#39;http&#39;).createServer(app);</span><br><span class="line">var io &#x3D; require(&#39;socket.io&#39;)(server);</span><br><span class="line"></span><br><span class="line">app.use(&#39;&#x2F;&#39;, express.static(__dirname + &#39;&#x2F;public&#39;)); </span><br><span class="line"></span><br><span class="line">server.listen(80);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;socket部分</span><br><span class="line">io.on(&#39;connection&#39;, function(socket) &#123;</span><br><span class="line">    &#x2F;&#x2F;接收并处理客户端的hi事件</span><br><span class="line">    socket.on(&#39;hi&#39;, function(data) &#123;</span><br><span class="line">        console.log(data);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;触发客户端事件c_hi</span><br><span class="line">        socket.emit(&#39;c_hi&#39;,&#39;hello too!&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;断开事件</span><br><span class="line">    socket.on(&#39;disconnect&#39;, function(data) &#123;</span><br><span class="line">    console.log(&#39;断开&#39;,data)</span><br><span class="line">        socket.emit(&#39;c_leave&#39;,&#39;离开&#39;);</span><br><span class="line">        &#x2F;&#x2F;socket.broadcast用于向整个网络广播(除自己之外)</span><br><span class="line">        &#x2F;&#x2F;socket.broadcast.emit(&#39;c_leave&#39;,&#39;某某人离开了&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种没有写怎么在http请求中怎么进行处理websocket消息。<br>基于Sequelize-cli生成的框架，其是又bin/www文件进行启动监听的，我们不进行修改，仍由www文件进行启动监听，但是app.js需<br>要修改。<br>app.js中新增以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var http &#x3D; require(&#39;http&#39;);</span><br><span class="line">var io &#x3D; require(&#39;socket.io&#39;)(server);</span><br><span class="line"></span><br><span class="line">app.use(function(req, res, next)&#123;  </span><br><span class="line">  res.io &#x3D; io;  </span><br><span class="line">  next();  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">io.on(&#39;connection&#39;, function(socket) &#123;</span><br><span class="line">    &#x2F;&#x2F;接收并处理客户端的hi事件</span><br><span class="line">    socket.on(&#39;hi&#39;, function(data) &#123;</span><br><span class="line">        console.log(data);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;触发客户端事件c_hi</span><br><span class="line">        socket.emit(&#39;c_hi&#39;,&#39;hello too!&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;断开事件</span><br><span class="line">    socket.on(&#39;disconnect&#39;, function(data) &#123;</span><br><span class="line">      console.log(&#39;断开&#39;,data)</span><br><span class="line">        socket.emit(&#39;c_leave&#39;,&#39;离开&#39;);</span><br><span class="line">        &#x2F;&#x2F;socket.broadcast用于向整个网络广播(除自己之外)</span><br><span class="line">        &#x2F;&#x2F;socket.broadcast.emit(&#39;c_leave&#39;,&#39;某某人离开了&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">app.server&#x3D;server</span><br><span class="line">module.exports &#x3D; app;</span><br></pre></td></tr></table></figure><p>www文件进行删除相应的http，以及http.createServe()，并将所有的server更换为app.serve</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var app &#x3D; require(&#39;..&#x2F;app&#39;);</span><br><span class="line">var debug &#x3D; require(&#39;debug&#39;)(&#39;app:server&#39;);</span><br><span class="line">var http &#x3D; require(&#39;http&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* Get port from environment and store in Express.</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">var port &#x3D; normalizePort(process.env.PORT || &#39;5000&#39;);</span><br><span class="line">app.set(&#39;port&#39;, port);</span><br><span class="line">&#x2F;**</span><br><span class="line">* Create HTTP server.</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.server.listen(port);</span><br><span class="line">app.server.on(&#39;error&#39;, onError);</span><br><span class="line">app.server.on(&#39;listening&#39;, onListening);</span><br></pre></td></tr></table></figure><p>这样在router/index.js中即可进行对房间中的连接进行发送消息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.get(&#39;&#x2F;:id&#39;, function (req, res, next) &#123;</span><br><span class="line">  res.io.emit(&#39;c_hi&#39;,&#123;code:1,data:&#39;data&#39;&#125;)</span><br><span class="line">  res.send(&#123;code:1,data:&#39;data&#39;&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;socket.io&#x2F;socket.io.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;ul id&#x3D;&quot;message&quot;&gt;&lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    socket &#x3D; io.connect(&#39;ws:&#x2F;&#x2F;127.0.0.1:5000&#39;);</span><br><span class="line"></span><br><span class="line">    socket.emit(&quot;message&quot;, &#123;&quot;name&quot; : navigator.userAgent, room:&#39;1&#39;, &quot;msg&quot; : &quot;hello world&quot;&#125;);</span><br><span class="line"></span><br><span class="line">    socket.on(&quot;message&quot;, function(obj) &#123;</span><br><span class="line"></span><br><span class="line">      console.log(obj);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>大功告成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网上基本出现的大多都是这种简单写法,并没有做一个深入的写，怎么进行在http请求中进行websocket的发送消息，近日，自己因为需求，因为不熟悉，走了很多弯路，故自己这次进行一下记录。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
    
      <category term="Node.js" scheme="http://weilonglong.top/tags/Node-js/"/>
    
      <category term="Socket.Io" scheme="http://weilonglong.top/tags/Socket-Io/"/>
    
      <category term="Express" scheme="http://weilonglong.top/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>border-radius的简写</title>
    <link href="http://weilonglong.top/2020/08/19/border-radius%E7%9A%84%E7%AE%80%E5%86%99/"/>
    <id>http://weilonglong.top/2020/08/19/border-radius%E7%9A%84%E7%AE%80%E5%86%99/</id>
    <published>2020-08-19T04:20:53.000Z</published>
    <updated>2021-02-22T15:43:45.157Z</updated>
    
    <content type="html"><![CDATA[<p>border-radius一般在实际使用的时候一般是画小圆角或者弧度，弧度花的话一般也是四个角一起画，两个角画会响应减少，两个角的弧度不一致更在实际的需求会少很多,就算一个角有特殊需求，也可以单独进行设置。</p><p>border-radius在实际的使用中还是很多的，在最一开始学的时候记住了简写，没有深入的学习,虽然会写，但是复杂的带/的没弄懂什么意思，今天学习一下。<br><code>border-radius:2px;</code><br>等价于的语句是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">border-top-left-radius:2px 2px;</span><br><span class="line">border-top-right-raduis:2px 2px;</span><br><span class="line">border-bottom-right-raduis:2px 2px;</span><br><span class="line">border-bottom-left-radius:2px 2px;</span><br></pre></td></tr></table></figure><p>为什么这两个是等价的呢。<br>在菜鸟教程文档中,border-radius的标准简写是这样的<br><code>border-radius: 1-4 length|% / 1-4 length|%;</code><br><code>注意: 每个半径的四个值的顺序是：左上角，右上角，右下角，左下角。如果省略左下角，右上角是相同的。如果省略右下角，左上角是相同的。如果省略右上角，左上角是相同的。</code></p><p>归根于这句话。<br>之前的那种写法都是省略过的，如果补全是这样的。<br><code>border-radius:2px 2px 2px 2px/2px 2px 2px 2px;</code></p><p>这里边有一个重点，即如果省略左下角，右上角是相同的。如果省略右下角，左上角是相同的。如果省略右上角，左上角是相同的；如果你使用省略写法的话,单独一个角没有圆角时，必须记得设置为0，那么其会与之相匹配的角一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">border-radius: 2em 1em 4em &#x2F; 0.5em 3em;</span><br><span class="line"></span><br><span class="line">is equivalent to:</span><br><span class="line"></span><br><span class="line">border-top-left-radius: 2em 0.5em;</span><br><span class="line">border-top-right-radius: 1em 3em;</span><br><span class="line">border-bottom-right-radius: 4em 0.5em;</span><br><span class="line">border-bottom-left-radius: 1em 3em;</span><br></pre></td></tr></table></figure><p>在上边的”/“前面是圆角的水平半径，”/“后面是圆角的垂直半径。<br>这样也就理解了上边的等价是什么意思。<br>其补充完是这样的<br><code>border-radius: 2em 1em 4em 1em/ 0.5em 3em 0.5em 3em;</code><br>这样再去看其相等就一眼看明白了。</p>]]></content>
    
    <summary type="html">
    
      css中border-radius的简写研究
    
    </summary>
    
    
    
      <category term="css" scheme="http://weilonglong.top/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>前端无痛刷新token</title>
    <link href="http://weilonglong.top/2020/08/17/%E5%89%8D%E7%AB%AF%E6%97%A0%E7%97%9B%E5%88%B7%E6%96%B0token/"/>
    <id>http://weilonglong.top/2020/08/17/%E5%89%8D%E7%AB%AF%E6%97%A0%E7%97%9B%E5%88%B7%E6%96%B0token/</id>
    <published>2020-08-17T12:50:41.000Z</published>
    <updated>2021-02-22T15:43:45.160Z</updated>
    
    <content type="html"><![CDATA[<p>两种方案，第一种记录登录时间，根据后台设置的token过期时间，进行在时间内请求更换token<br>第二种利用axios的拦截，在返回token过期时，那么token去更换token，再用新的token去请求数据。<br>第二种，上代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">import &#123; Message &#125; from &#39;element-ui&#39;</span><br><span class="line">import store from &#39;@&#x2F;store&#39;</span><br><span class="line">import &#123; getToken &#125; from &#39;@&#x2F;utils&#x2F;auth&#39;</span><br><span class="line"></span><br><span class="line">var isRefreshing &#x3D; false</span><br><span class="line">var requests &#x3D; []</span><br><span class="line">&#x2F;&#x2F; create an axios instance</span><br><span class="line">const service &#x3D; axios.create(&#123;</span><br><span class="line">  baseURL: process.env.VUE_APP_BASE_API,</span><br><span class="line">  timeout: 5000 &#x2F;&#x2F; request timeout</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; request interceptor</span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  config &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if (store.getters.token) &#123;</span><br><span class="line">      config.headers[&#39;Authorization&#39;] &#x3D; &#39;Bearer &#39; + getToken()</span><br><span class="line">    &#125;</span><br><span class="line">    return config</span><br><span class="line">  &#125;,</span><br><span class="line">  error &#x3D;&gt; &#123;</span><br><span class="line">    console.log(error) &#x2F;&#x2F; for debug</span><br><span class="line">    return Promise.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; response interceptor</span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * If you want to get http information such as headers or status</span><br><span class="line">   * Please return  response &#x3D;&gt; response</span><br><span class="line">  *&#x2F;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Determine the request status by custom code</span><br><span class="line">   * Here is just an example</span><br><span class="line">   * You can also judge the status by HTTP Status Code</span><br><span class="line">   *&#x2F;</span><br><span class="line">  response &#x3D;&gt; &#123;</span><br><span class="line">    const res &#x3D; response.data</span><br><span class="line">    console.log(res, &#39;response.data&#39;)</span><br><span class="line">    if (res.code &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">      return res</span><br><span class="line">    &#125; else if (res.code &#x3D;&#x3D;&#x3D; 50008 || res.code &#x3D;&#x3D;&#x3D; 50012 || res.code &#x3D;&#x3D;&#x3D; 50014) &#123;</span><br><span class="line">      const config &#x3D; response.config</span><br><span class="line">      if (!isRefreshing) &#123;</span><br><span class="line">        isRefreshing &#x3D; true</span><br><span class="line">        return store.dispatch(&#39;user&#x2F;resetToken&#39;).then((res) &#x3D;&gt; &#123;</span><br><span class="line">          const token &#x3D; res</span><br><span class="line">          config.headers[&#39;Authorization&#39;] &#x3D; token</span><br><span class="line">          config.baseURL &#x3D; &#39;&#39; &#x2F;&#x2F; url已经带上了&#x2F;api，避免出现&#x2F;api&#x2F;api的情况</span><br><span class="line">          requests.forEach(item &#x3D;&gt; item(token))</span><br><span class="line">          requests &#x3D; []</span><br><span class="line">          &#x2F;&#x2F; 重试当前请求并返回promise</span><br><span class="line">          &#x2F;&#x2F; console.log(service(config), &#39;service(config)&#39;)</span><br><span class="line">          return service(config)</span><br><span class="line">        &#125;).catch(err &#x3D;&gt; &#123;</span><br><span class="line">          console.log(err)</span><br><span class="line">          &#x2F;&#x2F; console.error(&#39;refreshtoken error &#x3D;&gt;&#39;, res)</span><br><span class="line">          &#x2F;&#x2F; 刷新token失败，神仙也救不了了，跳转到首页重新登录吧</span><br><span class="line">          window.location.href &#x3D; &#39;&#x2F;&#39;</span><br><span class="line">        &#125;).finally(() &#x3D;&gt; &#123;</span><br><span class="line">          isRefreshing &#x3D; false</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F; 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行</span><br><span class="line">          requests.push((token) &#x3D;&gt; &#123;</span><br><span class="line">            config.baseURL &#x3D; &#39;&#39;</span><br><span class="line">            config.headers[&#39;Authorization&#39;] &#x3D; token</span><br><span class="line">            resolve(service(config))</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      Message(&#123;</span><br><span class="line">        message: res.message,</span><br><span class="line">        type: &#39;error&#39;,</span><br><span class="line">        duration: 5 * 1000</span><br><span class="line">      &#125;)</span><br><span class="line">      return Promise.reject(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  error &#x3D;&gt; &#123;</span><br><span class="line">    return Promise.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">export default service</span><br></pre></td></tr></table></figure><p>思路,<br>当后端返回无权限时，将请求先保存下来，return一个Promise,利用Promise去刷新token,当请求token成功,拿着心得token,拿着存的config，去再次请求，成功后reslove()<br>这时带来了一个问题，就是当多次请求时,会多次refresh_token<br>设置一个状态值，用于记录是否正在刷新token。<br>如果正在刷新token，将其利用Promise，将其封装为一个函数,内部自动调用resolve,存入一个数组，等到刷新token后，执行存入的函数,执行resolve(),然后依次来再次请求数据，返回正确的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 我们先看一下，定义fn1</span><br><span class="line">function fn1 () &#123;</span><br><span class="line">    console.log(&#39;执行fn1&#39;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行fn1,只需后面加个括号</span><br><span class="line">fn1()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 回归到我们request数组中，每一项其实存的就是一个类似fn1的一个函数</span><br><span class="line">const fn2 &#x3D; (token) &#x3D;&gt; &#123;</span><br><span class="line">    config.headers[&#39;X-Token&#39;] &#x3D; token</span><br><span class="line">    resolve(config)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 我们要执行fn2，也只需在后面加个括号就可以了</span><br><span class="line">fn2()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 由于requests是一个数组，所以我们想遍历执行里面的所有的项，所以用上了forEach</span><br><span class="line">requests.forEach(fn &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 执行fn</span><br><span class="line">  fn()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      前端中基于token的鉴权，jwt的实现方式，基于此的前端无痛刷新过期token的实现。
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://weilonglong.top/tags/Vue/"/>
    
      <category term="token" scheme="http://weilonglong.top/tags/token/"/>
    
      <category term="Axios" scheme="http://weilonglong.top/tags/Axios/"/>
    
  </entry>
  
  <entry>
    <title>长时间无操作退出登录，返回登录页</title>
    <link href="http://weilonglong.top/2020/08/16/%E9%95%BF%E6%97%B6%E9%97%B4%E6%97%A0%E6%93%8D%E4%BD%9C%E9%80%80%E5%87%BA%E7%99%BB%E5%BD%95%EF%BC%8C%E8%BF%94%E5%9B%9E%E7%99%BB%E5%BD%95%E9%A1%B5/"/>
    <id>http://weilonglong.top/2020/08/16/%E9%95%BF%E6%97%B6%E9%97%B4%E6%97%A0%E6%93%8D%E4%BD%9C%E9%80%80%E5%87%BA%E7%99%BB%E5%BD%95%EF%BC%8C%E8%BF%94%E5%9B%9E%E7%99%BB%E5%BD%95%E9%A1%B5/</id>
    <published>2020-08-16T12:53:29.000Z</published>
    <updated>2021-02-22T15:43:45.166Z</updated>
    
    <content type="html"><![CDATA[<p>先上代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      interval: null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">    localStorage.setItem(&#39;lastTime&#39;, new Date().getTime())</span><br><span class="line">    this.addOn()</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">    window.clearInterval(this.interval)</span><br><span class="line">&#125;,</span><br><span class="line"> methods: &#123;</span><br><span class="line">    addOn() &#123;</span><br><span class="line">      var lastTime &#x3D; new Date().getTime()</span><br><span class="line">      var currentTime &#x3D; new Date().getTime()</span><br><span class="line">      var timeOut &#x3D; 30 * 60 * 1000; &#x2F;&#x2F; 设置超时时间： 30分</span><br><span class="line"></span><br><span class="line">      window.document.onmousedown &#x3D; function() &#123;</span><br><span class="line">        localStorage.setItem(&#39;lastTime&#39;, new Date().getTime())</span><br><span class="line">      &#125;</span><br><span class="line">      function checkTimeout() &#123;</span><br><span class="line">        currentTime &#x3D; new Date().getTime() &#x2F;&#x2F; 更新当前时间</span><br><span class="line">        lastTime &#x3D; localStorage.getItem(&#39;lastTime&#39;)</span><br><span class="line">        if (currentTime - lastTime &gt; timeOut) &#123; &#x2F;&#x2F; 判断是否超时</span><br><span class="line">          var url &#x3D; window.location.href</span><br><span class="line">          var newUrl &#x3D; url.match(&#x2F;(\S*)#&#x2F;)[1]</span><br><span class="line">          removeToken()</span><br><span class="line">          window.open(newUrl + &#39;#&#x2F;login&#39;, &#39;_self&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;* 定时器 间隔30秒检测是否长时间未操作页面 *&#x2F;</span><br><span class="line">      this.interval &#x3D; window.setInterval(checkTimeout, 30*1000)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>该页面时Layout布局中的,login页面是不引用的,<br>思路,在该页面mounted时设置一个时间，增加一个监听事件<br>每按下鼠标时，更新一次时间<br>每隔30s判断一次上次按下鼠标据现在时间间隔,如果超过了30分钟，清空定时器<br>清空token,将其返回到登录页面。<br>那么beforeDestroy()中是为了人为操作退出登录，然后清空定时器</p>]]></content>
    
    <summary type="html">
    
      前端页面,长时间无操作退出登录，返回登录页
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://weilonglong.top/tags/Vue/"/>
    
      <category term="JaveScript" scheme="http://weilonglong.top/tags/JaveScript/"/>
    
  </entry>
  
  <entry>
    <title>Sequelize-cli中新增列和删除列</title>
    <link href="http://weilonglong.top/2020/08/13/Sequelize-cli%E4%B8%AD%E6%96%B0%E5%A2%9E%E5%88%97%E5%92%8C%E5%88%A0%E9%99%A4%E5%88%97/"/>
    <id>http://weilonglong.top/2020/08/13/Sequelize-cli%E4%B8%AD%E6%96%B0%E5%A2%9E%E5%88%97%E5%92%8C%E5%88%A0%E9%99%A4%E5%88%97/</id>
    <published>2020-08-13T14:37:41.000Z</published>
    <updated>2020-08-13T14:38:42.113Z</updated>
    
    <content type="html"><![CDATA[<p>之前处于来发的时候，都是将数据表删除，将Sequlize迁移记录表中的记录进行删除，然后进行运行迁移，生成数据表，现在项目已经跑起来了，不能再这样操作了，否则会造成数据丢失。故寻找执行其迁移文件的增加列方法。<br>第一步执行命令<br><code>sequelize migration：create --name name_of_your_migration</code><br>或者自己手动新建.js文件<br>进行修改js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#39;use strict&#39;;</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">up: (queryInterface, Sequelize) &#x3D;&gt; &#123;</span><br><span class="line">    return queryInterface.addColumn(</span><br><span class="line">        &#39;Storagelists&#39;,  &#x2F;&#x2F; 表名</span><br><span class="line">        &#39;name&#39;, &#x2F;&#x2F; 列名</span><br><span class="line">        Sequelize.TEXT &#x2F;&#x2F; 数据类型</span><br><span class="line">    );</span><br><span class="line">&#125;,</span><br><span class="line">down: (queryInterface, Sequelize) &#x3D;&gt; &#123;</span><br><span class="line">    return queryInterface.removeColumn(</span><br><span class="line">        &#39;Storagelists&#39;, &#x2F;&#x2F; 要执行的表名</span><br><span class="line">        &#39;deletename&#39; &#x2F;&#x2F; 删除的列名</span><br><span class="line">    ); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行迁移命令<br><code>sequleize db:migrate</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前处于来发的时候，都是将数据表删除，将Sequlize迁移记录表中的记录进行删除，然后进行运行迁移，生成数据表，现在项目已经跑起来了，不能再这样操作了，否则会造成数据丢失。故寻找执行其迁移文件的增加列方法。&lt;br&gt;第一步执行命令&lt;br&gt;&lt;code&gt;sequelize mi
      
    
    </summary>
    
    
    
      <category term="Sequelize-cli" scheme="http://weilonglong.top/tags/Sequelize-cli/"/>
    
  </entry>
  
  <entry>
    <title>Vue-cli项目使用CDN优化Element-ui打包体积太大问题</title>
    <link href="http://weilonglong.top/2020/08/11/Vue-cli%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8MDN%E5%8A%A0%E9%80%9FElement-ui/"/>
    <id>http://weilonglong.top/2020/08/11/Vue-cli%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8MDN%E5%8A%A0%E9%80%9FElement-ui/</id>
    <published>2020-08-11T09:22:03.000Z</published>
    <updated>2020-08-24T12:49:10.090Z</updated>
    
    <content type="html"><![CDATA[<p>Vue-cli生成的单页面,引入Element-ui后打包后js，css大，服务器带宽小，首屏渲染速度慢，进行优化的方案之一即是MDN加速。<br>在index.html中写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;element-ui&#x2F;2.7.2&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>修改main.js,将引入Element以及Use注释删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; import ElementUI from &#39;element-ui&#39;</span><br><span class="line">&#x2F;&#x2F; import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;</span><br><span class="line">&#x2F;&#x2F; Vue.use(ElementUI)</span><br></pre></td></tr></table></figure><p>修改vue.config.js,增加此段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">configureWebpack: &#123;</span><br><span class="line">    externals: &#123;</span><br><span class="line">        &#39;vue&#39;: &#39;Vue&#39;,</span><br><span class="line">        &#39;element-ui&#39;: &#39;ELEMENT&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大功告成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue-cli生成的单页面,引入Element-ui后打包后js，css大，服务器带宽小，首屏渲染速度慢，进行优化的方案之一即是MDN加速。&lt;br&gt;在index.html中写入&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="MDN优化" scheme="http://weilonglong.top/tags/MDN%E4%BC%98%E5%8C%96/"/>
    
      <category term="Element-ui性能优化" scheme="http://weilonglong.top/tags/Element-ui%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>在vue中使用screen-full全屏</title>
    <link href="http://weilonglong.top/2020/08/08/%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8screen-full%E5%85%A8%E5%B1%8F/"/>
    <id>http://weilonglong.top/2020/08/08/%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8screen-full%E5%85%A8%E5%B1%8F/</id>
    <published>2020-08-08T02:51:27.000Z</published>
    <updated>2021-02-22T15:43:45.161Z</updated>
    
    <content type="html"><![CDATA[<p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save screenfull</span><br></pre></td></tr></table></figure><p>封装为组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;svg-icon :icon-class&#x3D;&quot;isFullscreen?&#39;exit-fullscreen&#39;:&#39;fullscreen&#39;&quot; @click&#x3D;&quot;click&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import screenfull from &#39;screenfull&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name: &#39;Screenfull&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    isFullscreen: false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">    this.init()</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">    this.destroy()</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    click() &#123;</span><br><span class="line">    if (!screenfull.enabled) &#123;</span><br><span class="line">        this.$message(&#123;</span><br><span class="line">        message: &#39;you browser can not work&#39;,</span><br><span class="line">        type: &#39;warning&#39;</span><br><span class="line">        &#125;)</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">    screenfull.toggle()</span><br><span class="line">    &#125;,</span><br><span class="line">    change() &#123;</span><br><span class="line">    this.isFullscreen &#x3D; screenfull.isFullscreen</span><br><span class="line">    &#125;,</span><br><span class="line">    init() &#123;</span><br><span class="line">    if (screenfull.enabled) &#123;</span><br><span class="line">        screenfull.on(&#39;change&#39;, this.change)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    destroy() &#123;</span><br><span class="line">    if (screenfull.enabled) &#123;</span><br><span class="line">        screenfull.off(&#39;change&#39;, this.change)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.screenfull-svg &#123;</span><br><span class="line">display: inline-block;</span><br><span class="line">cursor: pointer;</span><br><span class="line">fill: #5a5e66;;</span><br><span class="line">width: 20px;</span><br><span class="line">height: 20px;</span><br><span class="line">vertical-align: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><ul><li>在需要使用的页面中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;screenfull id&#x3D;&quot;screenfull&quot; class&#x3D;&quot;right-menu-item hover-effect&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">import Screenfull from &#39;@&#x2F;components&#x2F;Screenfull&#39;</span><br><span class="line"></span><br><span class="line">components: &#123;</span><br><span class="line">    Screenfull</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      在vue中使用screen-full实现全屏效果
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://weilonglong.top/tags/Vue/"/>
    
      <category term="screenfull" scheme="http://weilonglong.top/tags/screenfull/"/>
    
  </entry>
  
  <entry>
    <title>使用bat文件快速启动vue项目</title>
    <link href="http://weilonglong.top/2020/08/05/%E4%BD%BF%E7%94%A8bat%E6%96%87%E4%BB%B6%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8vue%E9%A1%B9%E7%9B%AE/"/>
    <id>http://weilonglong.top/2020/08/05/%E4%BD%BF%E7%94%A8bat%E6%96%87%E4%BB%B6%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8vue%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-08-05T02:41:35.000Z</published>
    <updated>2021-02-22T15:43:45.158Z</updated>
    
    <content type="html"><![CDATA[<p>在日常开发中需要多次打包时或者多次运行node项目，简便此操作的方式</p><h3 id="单项目"><a href="#单项目" class="headerlink" title="单项目"></a>单项目</h3><p>例如需启动”d/vue”下的项目<br>新建run.text,写入以下内容，修改后缀名为.bat,双击运行项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">:: nodejs安装目录下的nodevars.bat</span><br><span class="line">set nodevars &#x3D; &quot;C:\Program Files\nodejs\nodevars.bat&quot;</span><br><span class="line">:: 切换到D盘</span><br><span class="line">d:</span><br><span class="line">:: 移动到需要启动的目录</span><br><span class="line">cd vue</span><br><span class="line">:: 启动项目</span><br><span class="line">cmd &#x2F;c %nodevars%&amp;&amp;npm run dev</span><br></pre></td></tr></table></figure><h3 id="可能多项目情况下"><a href="#可能多项目情况下" class="headerlink" title="可能多项目情况下"></a>可能多项目情况下</h3><p>如果在vue文件下有多个项目，可通过输入项目文件夹进行启动<br>例如 “d/vue/project1”,”d/vue/project2”项目,<br>可输入project1或者project2<br>如果运行项目直接回车，或者输入y/Y回车<br>如果只需要node环境，则输入n/N回车</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set nodevars &#x3D; &quot;C:\Program Files\nodejs\nodevars.bat&quot;</span><br><span class="line">:: 切换到D盘</span><br><span class="line">d:</span><br><span class="line">:: 移动到工作目录</span><br><span class="line">cd vue</span><br><span class="line">:: 中文提示会乱码</span><br><span class="line">echo Run Node.js command Or Npm run dev.</span><br><span class="line">set&#x2F;p option&#x3D;Enter project name:</span><br><span class="line">cd %option%</span><br><span class="line">set&#x2F;p keep&#x3D;Need &#39;Npm run dev&#39;?(y&#x2F;n)</span><br><span class="line">:: 区分输入指令</span><br><span class="line">set dev&#x3D;0</span><br><span class="line">if &quot;%keep%&quot;&#x3D;&#x3D;&quot;y&quot; (</span><br><span class="line">    set dev&#x3D;1</span><br><span class="line">) else if &quot;%keep%&quot;&#x3D;&#x3D;&quot;Y&quot; (</span><br><span class="line">    set dev&#x3D;2</span><br><span class="line">) else if &quot;%keep%&quot;&#x3D;&#x3D;&quot;&quot; (</span><br><span class="line">    set dev&#x3D;3</span><br><span class="line">) else if &quot;%keep%&quot;&#x3D;&#x3D;&quot;n&quot; (</span><br><span class="line">    set dev&#x3D;-1</span><br><span class="line">) else if &quot;%keep%&quot;&#x3D;&#x3D;&quot;N&quot; (</span><br><span class="line">    set dev &#x3D; -2</span><br><span class="line">)</span><br><span class="line">:: 运行程序</span><br><span class="line">if %dev% gtr 0 (</span><br><span class="line">    start cmd &#x2F;c %nodevars%&amp;&amp;npm run dev</span><br><span class="line">) else (</span><br><span class="line">    start cmd &#x2F;k %nodevars%</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="多项目-多任务"><a href="#多项目-多任务" class="headerlink" title="多项目,多任务"></a>多项目,多任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">echo 1</span><br><span class="line">@echo off</span><br><span class="line">@rem &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">:menu</span><br><span class="line">e:</span><br><span class="line">cls</span><br><span class="line"></span><br><span class="line">echo.</span><br><span class="line">:choseDir</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo              &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  选择项目目录 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">echo.</span><br><span class="line">echo                       1:    \atest&#x2F;webpack1</span><br><span class="line">echo                       2:    \net-tj-EL-ZRZS-Front-master\EL-ZRZS-Front21</span><br><span class="line">echo                       3:    compass-project</span><br><span class="line">echo                       4:    yeoman-project </span><br><span class="line">echo.</span><br><span class="line">echo                       P:    ??Git??????</span><br><span class="line">echo                       Q:    ??</span><br><span class="line">echo.</span><br><span class="line">echo              &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 选择项目目录 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">echo.</span><br><span class="line">set&#x2F;p option&#x3D;Enter project path:</span><br><span class="line">if &quot;%option%&quot;&#x3D;&#x3D;&quot;1&quot; (</span><br><span class="line">    cd &quot;atest&#x2F;webpack1&quot;</span><br><span class="line">)else if &quot;%option%&quot;&#x3D;&#x3D;&quot;2&quot; (</span><br><span class="line">    cd &quot;net-tj-EL-ZRZS-Front-master\EL-ZRZS-Front21&quot;</span><br><span class="line">)else if &quot;%option%&quot;&#x3D;&#x3D;&quot;&quot; (</span><br><span class="line">    cd &quot;net-tj-EL-ZRZS-Front-master\EL-ZRZS-Front21&quot;</span><br><span class="line">)else if &quot;%option%&quot;&#x3D;&#x3D;&quot;9&quot; (</span><br><span class="line">    goto gofirst</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:dosomething</span><br><span class="line">echo.</span><br><span class="line">echo              &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  你想干什么 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">echo.</span><br><span class="line">echo1:   运行项目</span><br><span class="line">echo2:   打包</span><br><span class="line">echo3：  执行EsLint验证</span><br><span class="line">echo.</span><br><span class="line">echo.</span><br><span class="line">echo9:   返回上一级</span><br><span class="line">echo.</span><br><span class="line">echo              &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 你想干什么 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">echo.</span><br><span class="line">set&#x2F;p option1&#x3D;Enter dosomething(1&#x2F;2):</span><br><span class="line">    if &quot;%option1%&quot;&#x3D;&#x3D;&quot;&quot; (</span><br><span class="line">        start cmd &#x2F;c %nodevars%&amp;&amp;npm run dev</span><br><span class="line">    )else if &quot;%option1%&quot;&#x3D;&#x3D;&quot;1&quot; (</span><br><span class="line">        start cmd &#x2F;c %nodevars%&amp;&amp;npm run dev</span><br><span class="line">    ) else if &quot;%option1%&quot;&#x3D;&#x3D;&quot;2&quot; (</span><br><span class="line">        start cmd &#x2F;c %nodevars%&amp;&amp;npm run build:prod</span><br><span class="line">    ) else if &quot;%option1%&quot;&#x3D;&#x3D;&quot;9&quot; (</span><br><span class="line">    goto gofirst</span><br><span class="line">    ) else if &quot;%option1%&quot;&#x3D;&#x3D;&quot;3&quot; (</span><br><span class="line">    start cmd &#x2F;c %nodevars%&amp;&amp;npm run lint</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:gofirst</span><br><span class="line"></span><br><span class="line">cd..</span><br><span class="line">cd..</span><br><span class="line">cd..</span><br><span class="line"></span><br><span class="line">goto choseDir</span><br></pre></td></tr></table></figure><p>最后效果<br><img src= "/img/loading.gif" data-src="dosDemo.png" alt="Image text"><br>注意事项：中文乱码情况下，以记事本打开另存为ANSI格式</p>]]></content>
    
    <summary type="html">
    
      在日常开发中需要多次打包时或者多次运行node项目，简便此操作的方式
    
    </summary>
    
    
    
      <category term="DOS命令" scheme="http://weilonglong.top/tags/DOS%E5%91%BD%E4%BB%A4/"/>
    
      <category term="批处理脚本" scheme="http://weilonglong.top/tags/%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>前端常用正则库</title>
    <link href="http://weilonglong.top/2020/08/03/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E5%BA%93/"/>
    <id>http://weilonglong.top/2020/08/03/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E5%BA%93/</id>
    <published>2020-08-03T02:36:57.000Z</published>
    <updated>2021-02-22T15:43:45.159Z</updated>
    
    <content type="html"><![CDATA[<h3 id="是否合法IP地址"><a href="#是否合法IP地址" class="headerlink" title="是否合法IP地址"></a>是否合法IP地址</h3><p>export function validateIP(rule, value, callback) {<br>  if (value === ‘’ || value === undefined || value == null) {<br>    callback()<br>  } else {<br>    const reg = /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5]).(\d{1,2}|1\d\d|2[0-4]\d|25[0-5]).(\d{1,2}|1\d\d|2[0-4]\d|25[0-5]).(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/<br>    if ((!reg.test(value)) &amp;&amp; value !== ‘’) {<br>      callback(new Error(‘请输入正确的IP地址’))<br>    } else {<br>      callback()<br>    }<br>  }<br>}</p><h3 id="是否手机号码或者固话"><a href="#是否手机号码或者固话" class="headerlink" title="是否手机号码或者固话"></a>是否手机号码或者固话</h3><p>export function validatePhoneTwo(rule, value, callback) {<br>  const reg = /^((0\d{2,3}-\d{7,8})|(1[34578]\d{9}))$/<br>  if (value === ‘’ || value === undefined || value == null) {<br>    callback()<br>  } else {<br>    if ((!reg.test(value)) &amp;&amp; value !== ‘’) {<br>      callback(new Error(‘请输入正确的电话号码或者固话号码’))<br>    } else {<br>      callback()<br>    }<br>  }<br>}</p><h3 id="是否固话"><a href="#是否固话" class="headerlink" title="是否固话"></a>是否固话</h3><p>export function validateTelphone(rule, value, callback) {<br>  const reg = /0\d{2}-\d{7,8}/<br>  if (value === ‘’ || value === undefined || value === null) {<br>    callback()<br>  } else {<br>    if ((!reg.test(value)) &amp;&amp; value !== ‘’) {<br>      callback(new Error(‘请输入正确的固话（格式：区号+号码,如010-1234567）’))<br>    } else {<br>      callback()<br>    }<br>  }<br>}</p><h3 id="是否手机号码"><a href="#是否手机号码" class="headerlink" title="是否手机号码"></a>是否手机号码</h3><p>export function validatePhone(rule, value, callback) {<br>  const reg = /^[1][3,4,5,7,8][0-9]{9}$/<br>  if (value === ‘’ || value === undefined || value == null) {<br>    callback()<br>  } else {<br>    if ((!reg.test(value)) &amp;&amp; value !== ‘’) {<br>      callback(new Error(‘请输入正确的电话号码’))<br>    } else {<br>      callback()<br>    }<br>  }<br>}</p><h3 id="是否身份证号码"><a href="#是否身份证号码" class="headerlink" title="是否身份证号码"></a>是否身份证号码</h3><p>export function validateIdNo(rule, value, callback) {<br>  const reg = /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/<br>  if (value === ‘’ || value === undefined || value == null) {<br>    callback()<br>  } else {<br>    if ((!reg.test(value)) &amp;&amp; value !== ‘’) {<br>      callback(new Error(‘请输入正确的身份证号码’))<br>    } else {<br>      callback()<br>    }<br>  }<br>}</p><h3 id="是否邮箱"><a href="#是否邮箱" class="headerlink" title="是否邮箱"></a>是否邮箱</h3><p>export function validateEMail(rule, value, callback) {<br>  const reg = /^([a-zA-Z0-9]+[-_.]?)+@[a-zA-Z0-9]+.[a-z]+$/<br>  if (value === ‘’ || value === undefined || value == null) {<br>    callback()<br>  } else {<br>    if (!reg.test(value)) {<br>      callback(new Error(‘请输入正确的邮箱地址’))<br>    } else {<br>      callback()<br>    }<br>  }<br>}</p><h3 id="合法uri"><a href="#合法uri" class="headerlink" title="合法uri"></a>合法uri</h3><p>export function validateURL(textval) {<br>  const urlregex = /^(https?|ftp)://([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)<em>@)</em>((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+.)<em>[a-zA-Z0-9-]+.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)</em>(/($|[a-zA-Z0-9.,?’\+&amp;%$#=~_-]+))*$/<br>  return urlregex.test(textval)<br>}</p><h3 id="验证内容是否英文数字以及下划线"><a href="#验证内容是否英文数字以及下划线" class="headerlink" title="验证内容是否英文数字以及下划线"></a>验证内容是否英文数字以及下划线</h3><p>export function isPassword(rule, value, callback) {<br>  const reg = /^[_a-zA-Z0-9]+$/<br>  if (value === ‘’ || value === undefined || value == null) {<br>    callback()<br>  } else {<br>    if (!reg.test(value)) {<br>      callback(new Error(‘密码仅由英文字母，数字以及下划线组成’))<br>    } else {<br>      callback()<br>    }<br>  }<br>}</p><h3 id="自动检验数值的范围"><a href="#自动检验数值的范围" class="headerlink" title="自动检验数值的范围"></a>自动检验数值的范围</h3><p>export function checkMax20000(rule, value, callback) {<br>  if (value === ‘’ || value === undefined || value == null) {<br>    callback()<br>  } else if (!Number(value)) {<br>    callback(new Error(‘请输入[1,20000]之间的数字’))<br>  } else if (value &lt; 1 || value &gt; 20000) {<br>    callback(new Error(‘请输入[1,20000]之间的数字’))<br>  } else {<br>    callback()<br>  }<br>}</p><h3 id="验证数字输入框最大数值-32767"><a href="#验证数字输入框最大数值-32767" class="headerlink" title="验证数字输入框最大数值,32767"></a>验证数字输入框最大数值,32767</h3><p>export function checkMaxVal(rule, value, callback) {<br>  if (value &lt; 0 || value &gt; 32767) {<br>    callback(new Error(‘请输入[0,32767]之间的数字’))<br>  } else {<br>    callback()<br>  }<br>}</p><h3 id="验证是否1-99之间"><a href="#验证是否1-99之间" class="headerlink" title="验证是否1-99之间"></a>验证是否1-99之间</h3><p>export function isOneToNinetyNine(rule, value, callback) {<br>  if (!value) {<br>    return callback(new Error(‘输入不可以为空’))<br>  }<br>  setTimeout(() =&gt; {<br>    if (!Number(value)) {<br>      callback(new Error(‘请输入正整数’))<br>    } else {<br>      const re = /^[1-9][0-9]{0,1}$/<br>      const rsCheck = re.test(value)<br>      if (!rsCheck) {<br>        callback(new Error(‘请输入正整数，值为【1,99】’))<br>      } else {<br>        callback()<br>      }<br>    }<br>  }, 0)<br>}</p><h3 id="验证是否整数"><a href="#验证是否整数" class="headerlink" title="验证是否整数"></a>验证是否整数</h3><p>export function isInteger(rule, value, callback) {<br>  if (!value) {<br>    return callback(new Error(‘输入不可以为空’))<br>  }<br>  setTimeout(() =&gt; {<br>    if (!Number(value)) {<br>      callback(new Error(‘请输入正整数’))<br>    } else {<br>      const re = /^[0-9]<em>[1-9][0-9]</em>$/<br>      const rsCheck = re.test(value)<br>      if (!rsCheck) {<br>        callback(new Error(‘请输入正整数’))<br>      } else {<br>        callback()<br>      }<br>    }<br>  }, 0)<br>}</p><h3 id="验证是否整数-非必填"><a href="#验证是否整数-非必填" class="headerlink" title="验证是否整数,非必填"></a>验证是否整数,非必填</h3><p>export function isIntegerNotMust(rule, value, callback) {<br>  if (!value) {<br>    callback()<br>  }<br>  setTimeout(() =&gt; {<br>    if (!Number(value)) {<br>      callback(new Error(‘请输入正整数’))<br>    } else {<br>      const re = /^[0-9]<em>[1-9][0-9]</em>$/<br>      const rsCheck = re.test(value)<br>      if (!rsCheck) {<br>        callback(new Error(‘请输入正整数’))<br>      } else {<br>        callback()<br>      }<br>    }<br>  }, 1000)<br>}</p><h3 id="验证是否是-0-1-的小数"><a href="#验证是否是-0-1-的小数" class="headerlink" title="验证是否是[0-1]的小数"></a>验证是否是[0-1]的小数</h3><p>export function isDecimal(rule, value, callback) {<br>  if (!value) {<br>    return callback(new Error(‘输入不可以为空’))<br>  }<br>  setTimeout(() =&gt; {<br>    if (!Number(value)) {<br>      callback(new Error(‘请输入[0,1]之间的数字’))<br>    } else {<br>      if (value &lt; 0 || value &gt; 1) {<br>        callback(new Error(‘请输入[0,1]之间的数字’))<br>      } else {<br>        callback()<br>      }<br>    }<br>  }, 100)<br>}</p><h3 id="验证是否是-1-10-的小数-即不可以等于0"><a href="#验证是否是-1-10-的小数-即不可以等于0" class="headerlink" title="验证是否是[1-10]的小数,即不可以等于0"></a>验证是否是[1-10]的小数,即不可以等于0</h3><p>export function isBtnOneToTen(rule, value, callback) {<br>  if (typeof value === ‘undefined’) {<br>    return callback(new Error(‘输入不可以为空’))<br>  }<br>  setTimeout(() =&gt; {<br>    if (!Number(value)) {<br>      callback(new Error(‘请输入正整数，值为[1,10]’))<br>    } else {<br>      if (!(value === ‘1’ || value === ‘2’ || value === ‘3’ || value === ‘4’ || value === ‘5’ || value === ‘6’ || value === ‘7’ || value === ‘8’ || value === ‘9’ || value === ‘10’)) {<br>        callback(new Error(‘请输入正整数，值为[1,10]’))<br>      } else {<br>        callback()<br>      }<br>    }<br>  }, 100)<br>}</p><h3 id="验证是否是-1-100-的小数-即不可以等于0"><a href="#验证是否是-1-100-的小数-即不可以等于0" class="headerlink" title="验证是否是[1-100]的小数,即不可以等于0"></a>验证是否是[1-100]的小数,即不可以等于0</h3><p>export function isBtnOneToHundred(rule, value, callback) {<br>  if (!value) {<br>    return callback(new Error(‘输入不可以为空’))<br>  }<br>  setTimeout(() =&gt; {<br>    if (!Number(value)) {<br>      callback(new Error(‘请输入整数，值为[1,100]’))<br>    } else {<br>      if (value &lt; 1 || value &gt; 100) {<br>        callback(new Error(‘请输入整数，值为[1,100]’))<br>      } else {<br>        callback()<br>      }<br>    }<br>  }, 100)<br>}</p><h3 id="验证是否是-0-100-的小数"><a href="#验证是否是-0-100-的小数" class="headerlink" title="验证是否是[0-100]的小数"></a>验证是否是[0-100]的小数</h3><p>export function isBtnZeroToHundred(rule, value, callback) {<br>  if (!value) {<br>    return callback(new Error(‘输入不可以为空’))<br>  }<br>  setTimeout(() =&gt; {<br>    if (!Number(value)) {<br>      callback(new Error(‘请输入[1,100]之间的数字’))<br>    } else {<br>      if (value &lt; 0 || value &gt; 100) {<br>        callback(new Error(‘请输入[1,100]之间的数字’))<br>      } else {<br>        callback()<br>      }<br>    }<br>  }, 100)<br>}</p><h3 id="验证端口是否在-0-65535-之间"><a href="#验证端口是否在-0-65535-之间" class="headerlink" title="验证端口是否在[0,65535]之间"></a>验证端口是否在[0,65535]之间</h3><p>export function isPort(rule, value, callback) {<br>  if (!value) {<br>    return callback(new Error(‘输入不可以为空’))<br>  }<br>  setTimeout(() =&gt; {<br>    if (value === ‘’ || typeof (value) === undefined) {<br>      callback(new Error(‘请输入端口值’))<br>    } else {<br>      const re = /^([0-9]|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$/<br>      const rsCheck = re.test(value)<br>      if (!rsCheck) {<br>        callback(new Error(‘请输入在[0-65535]之间的端口值’))<br>      } else {<br>        callback()<br>      }<br>    }<br>  }, 100)<br>}</p><h3 id="验证端口是否在-0-65535-之间，非必填-isMust表示是否必填"><a href="#验证端口是否在-0-65535-之间，非必填-isMust表示是否必填" class="headerlink" title="验证端口是否在[0,65535]之间，非必填,isMust表示是否必填"></a>验证端口是否在[0,65535]之间，非必填,isMust表示是否必填</h3><p>export function isCheckPort(rule, value, callback) {<br>  if (!value) {<br>    callback()<br>  }<br>  setTimeout(() =&gt; {<br>    if (value === ‘’ || typeof (value) === undefined) {<br>      // callback(new Error(‘请输入端口值’));<br>    } else {<br>      const re = /^([0-9]|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$/<br>      const rsCheck = re.test(value)<br>      if (!rsCheck) {<br>        callback(new Error(‘请输入在[0-65535]之间的端口值’))<br>      } else {<br>        callback()<br>      }<br>    }<br>  }, 100)<br>}</p><h3 id="小写字母"><a href="#小写字母" class="headerlink" title="小写字母"></a>小写字母</h3><p>export function validateLowerCase(str) {<br>  const reg = /^[a-z]+$/<br>  return reg.test(str)<br>}</p><h3 id="验证key"><a href="#验证key" class="headerlink" title="验证key"></a>验证key</h3><p>// export function validateKey(str) {<br>//     var reg = /^[a-z_-:]+$/;<br>//     return reg.test(str);<br>// }</p><h3 id="大写字母"><a href="#大写字母" class="headerlink" title="大写字母"></a>大写字母</h3><p>export function validateUpperCase(str) {<br>  const reg = /^[A-Z]+$/<br>  return reg.test(str)<br>}</p><h3 id="大小写字母"><a href="#大小写字母" class="headerlink" title="大小写字母"></a>大小写字母</h3><p>export function validatAlphabets(rule, str, callback) {<br>  const reg = /^[A-Za-z]+$/<br>  const regTest = reg.test(str)<br>  if (!regTest) {<br>    callback(new Error(‘大小写字母’))<br>  } else {<br>    callback()<br>  }<br>}</p>]]></content>
    
    <summary type="html">
    
      前端中在JavaScript中常用的正则表达式
    
    </summary>
    
    
    
      <category term="正则表达式" scheme="http://weilonglong.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Vuex的使用总结</title>
    <link href="http://weilonglong.top/2020/08/01/vuex%E7%9A%84%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://weilonglong.top/2020/08/01/vuex%E7%9A%84%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</id>
    <published>2020-08-01T02:21:39.000Z</published>
    <updated>2020-08-09T14:43:36.558Z</updated>
    
    <content type="html"><![CDATA[<p>vuex是一个专门未vue.js应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><p>使用  npm install vuex –save<br>新建store文件夹/index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Vuex from &#39;vuex&#39;</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">import user from &#39;.&#x2F;modules&#x2F;user.js&#39;</span><br><span class="line"></span><br><span class="line">const store &#x3D; new Vuex.store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    actions:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    getters:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    modules:&#123;</span><br><span class="line">        user</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default store</span><br></pre></td></tr></table></figure><h3 id="在将store挂载到Vue的根组件上"><a href="#在将store挂载到Vue的根组件上" class="headerlink" title="在将store挂载到Vue的根组件上"></a>在将store挂载到Vue的根组件上</h3><p>main.js中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App&#39;</span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line">import store from &#39;.&#x2F;store&#39;</span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line"></span><br><span class="line">&#x2F;* eslint-disable no-new *&#x2F;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">router,</span><br><span class="line">store,</span><br><span class="line">components: &#123; App &#125;,</span><br><span class="line">template: &#39;&lt;App&#x2F;&gt;&#39;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5个核心概念"><a href="#5个核心概念" class="headerlink" title="5个核心概念"></a>5个核心概念</h3><h4 id="store"><a href="#store" class="headerlink" title="store"></a>store</h4><pre><code>其仓库</code></pre><h4 id="mutation"><a href="#mutation" class="headerlink" title="mutation"></a>mutation</h4><pre><code>用于同步更新store中的数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">    state.count++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h4 id="action"><a href="#action" class="headerlink" title="action"></a>action</h4><pre><code>用于异步更新store中的数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">    &#x2F;&#x2F; context.commit(&#39;increment&#39;)</span><br><span class="line">    setTimeout(function () &#123; context.commit(&#39;increment&#39;) &#125;, 2000)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h4 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h4><pre><code>相当于计算属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> getters: &#123;</span><br><span class="line">    doneTodos: state &#x3D;&gt; &#123;</span><br><span class="line">        return state.countNum + state.count</span><br><span class="line">    &#125;,</span><br><span class="line">    user: state &#x3D;&gt; state.user.user</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h4 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h4><pre><code>将store进行分块<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import user from &#39;.&#x2F;modules&#x2F;user.js&#39;</span><br><span class="line">modules: &#123;</span><br><span class="line">    user</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>其中modules下的user.js这么写<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const user &#x3D; &#123;</span><br><span class="line">    state: () &#x3D;&gt; (&#123; user: 3 &#125;),</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        changeUser (state) &#123;</span><br><span class="line">            state.user +&#x3D; 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        asyncChangeUser (context) &#123;</span><br><span class="line">            context.commit(&#39;changeUser&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        getUserAge: state &#x3D;&gt; state.user + &#39;岁&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default user</span><br></pre></td></tr></table></figure>访问时使用this.$store.state.user.user可以得到3使用this.$store.dispatch(&apos;asyncChnageUser&apos;)可以异步修改user模块中的user使用this.$store.commit(&apos;changeUser&apos;)可以同步修改user模块中的user使用this.getters.getUserAge 可以动态计算岁数</code></pre><h4 id="一次性引入所有modules"><a href="#一次性引入所有modules" class="headerlink" title="一次性引入所有modules"></a>一次性引入所有modules</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Vuex from &#39;vuex&#39;</span><br><span class="line">import getters from &#39;.&#x2F;getters.js&#39;</span><br><span class="line">&#x2F;&#x2F; import user from &#39;.&#x2F;modules&#x2F;user.js&#39;</span><br><span class="line">const modulesFiles &#x3D; require.context(&#39;.&#x2F;modules&#39;, true, &#x2F;\.js$&#x2F;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; you do not need &#96;import app from &#39;.&#x2F;modules&#x2F;app&#39;&#96;</span><br><span class="line">&#x2F;&#x2F; it will auto require all vuex module from modules file</span><br><span class="line">const modules &#x3D; modulesFiles.keys().reduce((modules, modulePath) &#x3D;&gt; &#123;</span><br><span class="line">&#x2F;&#x2F; set &#39;.&#x2F;app.js&#39; &#x3D;&gt; &#39;app&#39;</span><br><span class="line">const moduleName &#x3D; modulePath.replace(&#x2F;^\.\&#x2F;(.*)\.\w+$&#x2F;, &#39;$1&#39;)</span><br><span class="line">const value &#x3D; modulesFiles(modulePath)</span><br><span class="line">modules[moduleName] &#x3D; value.default</span><br><span class="line">return modules</span><br><span class="line">&#125;, &#123;&#125;)</span><br><span class="line">const state&#x3D; new Vue.store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    getters,</span><br><span class="line">    modules</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></code></pre><h4 id="module中开启命名空间"><a href="#module中开启命名空间" class="headerlink" title="module中开启命名空间"></a>module中开启命名空间</h4><p>在module中开启命名空间,加一个属性namespaced:true即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const user &#x3D; &#123;</span><br><span class="line">  namespaced: true, &#x2F;&#x2F;开启命名空间</span><br><span class="line">  state: () &#x3D;&gt; (&#123; user: 3 &#125;),</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    changeUser (state) &#123;</span><br><span class="line">      state.user +&#x3D; 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    asyncChnageUser (context) &#123;</span><br><span class="line">      context.commit(&#39;changeUser&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    getUserAge: state &#x3D;&gt; state.user + &#39;岁&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default user</span><br></pre></td></tr></table></figure><h5 id="进行action修改时"><a href="#进行action修改时" class="headerlink" title="进行action修改时"></a>进行action修改时</h5><p><code>this.$store.dispatch(&#39;user/asyncChnageUser&#39;)</code></p><h5 id="进行mutations修改时"><a href="#进行mutations修改时" class="headerlink" title="进行mutations修改时"></a>进行mutations修改时</h5><p><code>this.$store.dispath(&#39;user/changeUser&#39;)</code></p><h5 id="进行获取getters时"><a href="#进行获取getters时" class="headerlink" title="进行获取getters时"></a>进行获取getters时</h5><p><code>this.$store.getters[&#39;user/getUserAge&#39;]</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vuex是一个专门未vue.js应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。&lt;/p&gt;
&lt;h3 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://weilonglong.top/tags/Vue/"/>
    
      <category term="Vuex" scheme="http://weilonglong.top/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>数组降维方式</title>
    <link href="http://weilonglong.top/2020/07/25/%E6%95%B0%E7%BB%84%E9%99%8D%E7%BB%B4%E6%96%B9%E5%BC%8F/"/>
    <id>http://weilonglong.top/2020/07/25/%E6%95%B0%E7%BB%84%E9%99%8D%E7%BB%B4%E6%96%B9%E5%BC%8F/</id>
    <published>2020-07-25T14:31:39.000Z</published>
    <updated>2021-02-22T15:43:45.164Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript多重数组降维的实现</p><h3 id="数组字符串化"><a href="#数组字符串化" class="headerlink" title="数组字符串化"></a>数组字符串化</h3><a id="more"></a><p>所有类型会转成字符串，且元素为对象类型会被转换成”[object Object]”,对于同一种类型数字或字符串还是可以的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [[1,2,3],[4,5,6],&#123;a:1&#125;]</span><br><span class="line">arr+&#x3D;&#39;&#39;</span><br><span class="line">arr &#x3D; arr.split(&#39;,&#39;)</span><br><span class="line">console.log(arr) &#x2F;&#x2F; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;[object Object]&quot;]</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function reduceDimension(arr)&#123;</span><br><span class="line">    let ret &#x3D; []</span><br><span class="line">    let toArr &#x3D; fuinction(arr)&#123;</span><br><span class="line">       arr.forEach(function(item)&#123;</span><br><span class="line">           item instanceof Array ? toArr(item) : ret.push(item)</span><br><span class="line">       &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">    toArr(arr)</span><br><span class="line">    return ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Array-prototype-flat"><a href="#Array-prototype-flat" class="headerlink" title="Array.prototype.flat()"></a>Array.prototype.flat()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var arr1 &#x3D; [1,2,[3,4]]</span><br><span class="line">arr.flat() &#x2F;&#x2F; [1,2,3,4]</span><br><span class="line"></span><br><span class="line">var arr2 &#x3D; [1,2,[3,4,[5,6]]]</span><br><span class="line">arr2.flat() &#x2F;&#x2F;[1,2,3,4,[5,6]]</span><br><span class="line"></span><br><span class="line">var arr3 &#x3D; [1,2,[3,4,[5,6]]]</span><br><span class="line">arr3.flat(2) &#x2F;&#x2F;[1,2,3,4,5,6]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用Infinity作为深度，展开任意层度的嵌套数组</span><br><span class="line">arr3.flat(Infinity) &#x2F;&#x2F;[1,2,3,4,5,6]</span><br></pre></td></tr></table></figure><h3 id="使用stack无限反嵌套多层嵌套数组"><a href="#使用stack无限反嵌套多层嵌套数组" class="headerlink" title="使用stack无限反嵌套多层嵌套数组"></a>使用stack无限反嵌套多层嵌套数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var arr1 &#x3D; [1,2,3,[1,2,3,4,[2,3,4]]]</span><br><span class="line">function flatten(input)&#123;</span><br><span class="line">    const stack &#x3D; [...input]</span><br><span class="line">    const res &#x3D; []</span><br><span class="line">    while(stack.length)&#123;</span><br><span class="line">        &#x2F;&#x2F; 使用pop从stack中取出并移除值</span><br><span class="line">        const next &#x3D; stack.pop()</span><br><span class="line">        if(Array.isArray(next))&#123;</span><br><span class="line">            stack.push(...next)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            res.push(next)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res.reverse()</span><br><span class="line">&#125;</span><br><span class="line">flatten(arr1)</span><br></pre></td></tr></table></figure><h3 id="使用reduce、concat和递归无限反嵌套多层嵌套的数组"><a href="#使用reduce、concat和递归无限反嵌套多层嵌套的数组" class="headerlink" title="使用reduce、concat和递归无限反嵌套多层嵌套的数组"></a>使用reduce、concat和递归无限反嵌套多层嵌套的数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr1 &#x3D; [1,2,3,[2,3,4,[3,4,5,[4,5,6]]]]</span><br><span class="line">function flattenDeep(arr1)&#123;</span><br><span class="line">    return arr1.reduce((acc,val)&#x3D;&gt;Array.isArray(val) ? acc.concat(flattenDeep(val)) : acc.concat(val), []);</span><br><span class="line">&#125;</span><br><span class="line">flattenDeep(arr1) &#x2F;&#x2F;  [1, 2, 3, 2, 3, 4, 3, 4, 5, 4, 5, 6]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      JavaScript多重数组降维的实现
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://weilonglong.top/tags/JavaScript/"/>
    
      <category term="Array" scheme="http://weilonglong.top/tags/Array/"/>
    
  </entry>
  
</feed>
